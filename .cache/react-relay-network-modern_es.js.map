{
  "version": 3,
  "sources": ["../.yarn/cache/extract-files-npm-9.0.0-6ee13e6aab-c31781d090.zip/node_modules/extract-files/public/ReactNativeFile.js", "../.yarn/cache/extract-files-npm-9.0.0-6ee13e6aab-c31781d090.zip/node_modules/extract-files/public/isExtractableFile.js", "../.yarn/cache/extract-files-npm-9.0.0-6ee13e6aab-c31781d090.zip/node_modules/extract-files/public/extractFiles.js", "dep:react-relay-network-modern_es", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/index.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/RelayNetworkLayer.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/RelayRequest.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/RRNLError.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/fetchWithMiddleware.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/createRequestError.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/RelayResponse.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/middlewares/batch.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/utils.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/RelayRequestBatch.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/middlewares/legacyBatch.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/middlewares/retry.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/middlewares/url.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/middlewares/auth.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/middlewares/perf.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/middlewares/logger.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/middlewares/error.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/middlewares/cache.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/middlewares/progress.js", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/middlewares/upload.js", "../.yarn/cache/extract-files-npm-9.0.0-6ee13e6aab-c31781d090.zip/node_modules/extract-files/public/index.mjs", "../.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/express-middleware/graphqlBatchHTTPWrapper.js"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = function ReactNativeFile(_ref) {\n  var uri = _ref.uri,\n    name = _ref.name,\n    type = _ref.type;\n  this.uri = uri;\n  this.name = name;\n  this.type = type;\n};\n", "'use strict';\n\nvar ReactNativeFile = require('./ReactNativeFile');\n\nmodule.exports = function isExtractableFile(value) {\n  return (\n    (typeof File !== 'undefined' && value instanceof File) ||\n    (typeof Blob !== 'undefined' && value instanceof Blob) ||\n    value instanceof ReactNativeFile\n  );\n};\n", "'use strict';\n\nvar defaultIsExtractableFile = require('./isExtractableFile');\n\nmodule.exports = function extractFiles(value, path, isExtractableFile) {\n  if (path === void 0) {\n    path = '';\n  }\n\n  if (isExtractableFile === void 0) {\n    isExtractableFile = defaultIsExtractableFile;\n  }\n\n  var clone;\n  var files = new Map();\n\n  function addFile(paths, file) {\n    var storedPaths = files.get(file);\n    if (storedPaths) storedPaths.push.apply(storedPaths, paths);\n    else files.set(file, paths);\n  }\n\n  if (isExtractableFile(value)) {\n    clone = null;\n    addFile([path], value);\n  } else {\n    var prefix = path ? path + '.' : '';\n    if (typeof FileList !== 'undefined' && value instanceof FileList)\n      clone = Array.prototype.map.call(value, function (file, i) {\n        addFile(['' + prefix + i], file);\n        return null;\n      });\n    else if (Array.isArray(value))\n      clone = value.map(function (child, i) {\n        var result = extractFiles(child, '' + prefix + i, isExtractableFile);\n        result.files.forEach(addFile);\n        return result.clone;\n      });\n    else if (value && value.constructor === Object) {\n      clone = {};\n\n      for (var i in value) {\n        var result = extractFiles(value[i], '' + prefix + i, isExtractableFile);\n        result.files.forEach(addFile);\n        clone[i] = result.clone;\n      }\n    } else clone = value;\n  }\n\n  return {\n    clone: clone,\n    files: files,\n  };\n};\n", "\nexport * from \"./.yarn/__virtual__/react-relay-network-modern-virtual-3777a84ca4/0/cache/react-relay-network-modern-npm-6.0.0-05cbdb2575-ea6da6d260.zip/node_modules/react-relay-network-modern/es/index.js\"", "import RelayNetworkLayer from './RelayNetworkLayer';\nimport batchMiddleware, { RRNLBatchMiddlewareError } from './middlewares/batch';\nimport legacyBatchMiddleware from './middlewares/legacyBatch';\nimport retryMiddleware, { RRNLRetryMiddlewareError } from './middlewares/retry';\nimport urlMiddleware from './middlewares/url';\nimport authMiddleware, { RRNLAuthMiddlewareError } from './middlewares/auth';\nimport perfMiddleware from './middlewares/perf';\nimport loggerMiddleware from './middlewares/logger';\nimport errorMiddleware from './middlewares/error';\nimport cacheMiddleware from './middlewares/cache';\nimport progressMiddleware from './middlewares/progress';\nimport uploadMiddleware from './middlewares/upload';\nimport graphqlBatchHTTPWrapper from './express-middleware/graphqlBatchHTTPWrapper';\nimport RelayNetworkLayerRequest from './RelayRequest';\nimport RelayNetworkLayerRequestBatch from './RelayRequestBatch';\nimport RelayNetworkLayerResponse from './RelayResponse';\nimport { createRequestError, formatGraphQLErrors, RRNLRequestError } from './createRequestError';\nimport RRNLError from './RRNLError';\nexport { RelayNetworkLayer, RelayNetworkLayerRequest, RelayNetworkLayerRequestBatch, RelayNetworkLayerResponse, batchMiddleware, legacyBatchMiddleware, retryMiddleware, urlMiddleware, authMiddleware, perfMiddleware, loggerMiddleware, errorMiddleware, cacheMiddleware, progressMiddleware, uploadMiddleware, graphqlBatchHTTPWrapper, createRequestError, formatGraphQLErrors, RRNLError, RRNLRequestError, RRNLRetryMiddlewareError, RRNLAuthMiddlewareError, RRNLBatchMiddlewareError };", "import { Network } from 'relay-runtime';\nimport RelayRequest from './RelayRequest';\nimport fetchWithMiddleware from './fetchWithMiddleware';\nexport default class RelayNetworkLayer {\n  constructor(middlewares, opts) {\n    this._middlewares = [];\n    this._rawMiddlewares = [];\n    this._middlewaresSync = [];\n    this.noThrow = false;\n    const mws = Array.isArray(middlewares) ? middlewares : [middlewares];\n    mws.forEach(mw => {\n      if (mw) {\n        if (mw.execute) {\n          this._middlewaresSync.push(mw.execute);\n        } else if (mw.isRawMiddleware) {\n          this._rawMiddlewares.push(mw);\n        } else {\n          this._middlewares.push(mw);\n        }\n      }\n    });\n\n    if (opts) {\n      this.subscribeFn = opts.subscribeFn;\n      this.noThrow = opts.noThrow === true; // TODO deprecate\n\n      if (opts.beforeFetch) {\n        this._middlewaresSync.push(opts.beforeFetch);\n      }\n    }\n\n    this.fetchFn = (operation, variables, cacheConfig, uploadables) => {\n      for (let i = 0; i < this._middlewaresSync.length; i++) {\n        const res = this._middlewaresSync[i](operation, variables, cacheConfig, uploadables);\n\n        if (res) return res;\n      }\n\n      return {\n        subscribe: sink => {\n          const req = new RelayRequest(operation, variables, cacheConfig, uploadables);\n          const res = fetchWithMiddleware(req, this._middlewares, this._rawMiddlewares, this.noThrow);\n          res.then(value => {\n            sink.next(value);\n            sink.complete();\n          }, error => {\n            if (error && error.name && error.name === 'AbortError') {\n              sink.complete();\n            } else sink.error(error);\n          }) // avoid unhandled promise rejection error\n          .catch(() => {});\n          return () => {\n            req.cancel();\n          };\n        }\n      };\n    };\n\n    const network = Network.create(this.fetchFn, this.subscribeFn);\n    this.execute = network.execute;\n    this.executeWithEvents = network.executeWithEvents;\n  }\n\n}", "function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport RRNLError from './RRNLError';\n\nfunction getFormDataInterface() {\n  return typeof window !== 'undefined' && window.FormData || global && global.FormData;\n}\n\nexport default class RelayRequest {\n  constructor(operation, variables, cacheConfig, uploadables) {\n    this.operation = operation;\n    this.variables = variables;\n    this.cacheConfig = cacheConfig;\n    this.uploadables = uploadables;\n    this.id = this.operation.id || this.operation.name || this._generateID();\n    const fetchOpts = {\n      method: 'POST',\n      headers: {},\n      body: this.prepareBody()\n    };\n    this.controller = typeof window !== 'undefined' && window.AbortController ? new window.AbortController() : null;\n    if (this.controller) fetchOpts.signal = this.controller.signal;\n    this.fetchOpts = fetchOpts;\n  }\n\n  getBody() {\n    return this.fetchOpts.body;\n  }\n\n  prepareBody() {\n    const {\n      uploadables\n    } = this;\n\n    if (uploadables) {\n      const _FormData_ = getFormDataInterface();\n\n      if (!_FormData_) {\n        throw new RRNLError('Uploading files without `FormData` interface does not supported.');\n      }\n\n      const formData = new _FormData_();\n      formData.append('id', this.getID());\n      formData.append('query', this.getQueryString());\n      formData.append('variables', JSON.stringify(this.getVariables()));\n      Object.keys(uploadables).forEach(key => {\n        if (Object.prototype.hasOwnProperty.call(uploadables, key)) {\n          formData.append(key, uploadables[key]);\n        }\n      });\n      return formData;\n    }\n\n    return JSON.stringify({\n      id: this.getID(),\n      query: this.getQueryString(),\n      variables: this.getVariables()\n    });\n  }\n\n  getID() {\n    return this.id;\n  }\n\n  _generateID() {\n    if (!this.constructor.lastGenId) {\n      this.constructor.lastGenId = 0;\n    }\n\n    this.constructor.lastGenId += 1;\n    return this.constructor.lastGenId.toString();\n  }\n\n  getQueryString() {\n    return this.operation.text || '';\n  }\n\n  getVariables() {\n    return this.variables;\n  }\n\n  isMutation() {\n    return this.operation.operationKind === 'mutation';\n  }\n\n  isFormData() {\n    const _FormData_ = getFormDataInterface();\n\n    return !!_FormData_ && this.fetchOpts.body instanceof _FormData_;\n  }\n\n  cancel() {\n    if (this.controller) {\n      this.controller.abort();\n      return true;\n    }\n\n    return false;\n  }\n\n  clone() {\n    // $FlowFixMe\n    const newRequest = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n    newRequest.fetchOpts = _objectSpread({}, this.fetchOpts);\n    newRequest.fetchOpts.headers = _objectSpread({}, this.fetchOpts.headers);\n    return newRequest;\n  }\n\n}", "export default class RRNLError extends Error {\n  constructor(msg) {\n    super(msg);\n    this.name = 'RRNLError';\n  }\n\n}", "/* eslint-disable no-param-reassign, prefer-const */\nimport { createRequestError } from './createRequestError';\nimport RelayResponse from './RelayResponse';\n\nfunction runFetch(req) {\n  let {\n    url\n  } = req.fetchOpts;\n  if (!url) url = '/graphql';\n  if (!req.fetchOpts.headers.Accept) req.fetchOpts.headers.Accept = '*/*';\n\n  if (!req.fetchOpts.headers['Content-Type'] && !req.isFormData()) {\n    req.fetchOpts.headers['Content-Type'] = 'application/json';\n  }\n\n  return fetch(url, req.fetchOpts);\n} // convert fetch response to RelayResponse object\n\n\nconst convertResponse = next => async req => {\n  const resFromFetch = await next(req);\n  const res = await RelayResponse.createFromFetch(resFromFetch);\n\n  if (res.status && res.status >= 400) {\n    throw createRequestError(req, res);\n  }\n\n  return res;\n};\n\nexport default function fetchWithMiddleware(req, middlewares, // works with RelayResponse\nrawFetchMiddlewares, // works with raw fetch response\nnoThrow) {\n  // $FlowFixMe\n  const wrappedFetch = compose(...middlewares, convertResponse, ...rawFetchMiddlewares)(runFetch);\n  return wrappedFetch(req).then(res => {\n    if (!noThrow && (!res || res.errors || !res.data)) {\n      throw createRequestError(req, res);\n    }\n\n    return res;\n  });\n}\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nfunction compose(...funcs) {\n  if (funcs.length === 0) {\n    return arg => arg;\n  } else {\n    const last = funcs[funcs.length - 1];\n    const rest = funcs.slice(0, -1); // $FlowFixMe - Suppress error about promise not being callable\n\n    return (...args) => rest.reduceRight((composed, f) => f(composed), last(...args));\n  }\n}", "import RelayRequest from './RelayRequest';\nimport RRNLError from './RRNLError';\nexport class RRNLRequestError extends RRNLError {\n  constructor(msg) {\n    super(msg);\n    this.name = 'RRNLRequestError';\n  }\n\n}\n/**\n * Formats an error response from GraphQL server request.\n */\n\nexport function formatGraphQLErrors(request, errors) {\n  const CONTEXT_BEFORE = 20;\n  const CONTEXT_LENGTH = 60;\n\n  if (!request.getQueryString) {\n    return errors.join('\\n');\n  }\n\n  let queryLines = [];\n  const queryString = request.getQueryString();\n\n  if (queryString) {\n    // When using persisted query, queryString is an empty string.\n    queryLines = queryString.split('\\n');\n  }\n\n  return errors.map(({\n    locations,\n    message\n  }, ii) => {\n    const prefix = `${ii + 1}. `;\n    const indent = ' '.repeat(prefix.length); // custom errors thrown in graphql-server may not have locations\n\n    const locationMessage = locations && queryLines.length ? '\\n' + locations.map(({\n      column,\n      line\n    }) => {\n      const queryLine = queryLines[line - 1];\n      const offset = Math.min(column - 1, CONTEXT_BEFORE);\n      return [queryLine.substr(column - 1 - offset, CONTEXT_LENGTH), `${' '.repeat(Math.max(offset, 0))}^^^`].map(messageLine => indent + messageLine).join('\\n');\n    }).join('\\n') : '';\n    return prefix + message + locationMessage;\n  }).join('\\n');\n}\nexport function createRequestError(req, res) {\n  let errorReason = '';\n\n  if (!res) {\n    errorReason = 'Server return empty response.';\n  } else if (res.errors) {\n    if (req instanceof RelayRequest) {\n      errorReason = formatGraphQLErrors(req, res.errors);\n    } else {\n      errorReason = JSON.stringify(res.errors);\n    }\n  } else if (!res.json) {\n    errorReason = (res.text ? res.text : `Server return empty response with Status Code: ${res.status}.`) + (res ? `\\n\\n${res.toString()}` : '');\n  } else if (!res.data) {\n    errorReason = 'Server return empty response.data.\\n\\n' + res.toString();\n  }\n\n  const error = new RRNLRequestError(`Relay request for \\`${req.getID()}\\` failed by the following reasons:\\n\\n${errorReason}`);\n  error.req = req;\n  error.res = res;\n  return error;\n}", "export default class RelayResponse {\n  // response from low-level method, eg. fetch\n  static async createFromFetch(res) {\n    const r = new RelayResponse();\n    r._res = res;\n    r.ok = res.ok;\n    r.status = res.status;\n    r.url = res.url;\n    r.headers = res.headers;\n\n    if (res.status < 200 || res.status >= 300) {\n      r.text = await res.text();\n    } else {\n      r.processJsonData((await res.json()));\n    }\n\n    return r;\n  }\n\n  static async createFromGraphQL(res) {\n    const r = new RelayResponse();\n    r._res = res;\n    r.ok = true;\n    r.status = 200;\n    r.data = res.data;\n    r.errors = res.errors;\n    return r;\n  }\n\n  processJsonData(json) {\n    this.json = json;\n\n    if (json) {\n      if (json.data) this.data = json.data;\n      if (json.errors) this.errors = json.errors;\n    }\n  }\n\n  clone() {\n    // $FlowFixMe\n    return Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n  }\n\n  toString() {\n    return [`Response:`, `   Url: ${this.url || ''}`, `   Status code: ${this.status || ''}`, `   Status text: ${this.statusText || ''}`, `   Response headers: ${JSON.stringify(this.headers) || ''}`, `   Response body: ${JSON.stringify(this.json) || ''}`].join('\\n');\n  }\n\n}", "function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable no-param-reassign */\nimport { isFunction } from '../utils';\nimport RelayRequestBatch from '../RelayRequestBatch';\nimport RelayRequest from '../RelayRequest';\nimport RRNLError from '../RRNLError'; // Max out at roughly 100kb (express-graphql imposed max)\n\nconst DEFAULT_BATCH_SIZE = 102400;\nexport class RRNLBatchMiddlewareError extends RRNLError {\n  constructor(msg) {\n    super(msg);\n    this.name = 'RRNLBatchMiddlewareError';\n  }\n\n}\nexport default function batchMiddleware(options) {\n  const opts = options || {};\n  const batchTimeout = opts.batchTimeout || 0; // 0 is the same as nextTick in nodeJS\n\n  const allowMutations = opts.allowMutations || false;\n  const batchUrl = opts.batchUrl || '/graphql/batch';\n  const maxBatchSize = opts.maxBatchSize || DEFAULT_BATCH_SIZE;\n  const singleton = {};\n  const fetchOpts = {};\n  if (opts.method) fetchOpts.method = opts.method;\n  if (opts.credentials) fetchOpts.credentials = opts.credentials;\n  if (opts.mode) fetchOpts.mode = opts.mode;\n  if (opts.cache) fetchOpts.cache = opts.cache;\n  if (opts.redirect) fetchOpts.redirect = opts.redirect;\n  if (opts.headers) fetchOpts.headersOrThunk = opts.headers;\n  return next => req => {\n    // do not batch mutations unless allowMutations = true\n    if (req.isMutation() && !allowMutations) {\n      return next(req);\n    }\n\n    if (!(req instanceof RelayRequest)) {\n      throw new RRNLBatchMiddlewareError('Relay batch middleware accepts only simple RelayRequest. Did you add batchMiddleware twice?');\n    } // req with FormData can not be batched\n\n\n    if (req.isFormData()) {\n      return next(req);\n    } // skip batching if request explicitly opts out\n\n\n    if (req.cacheConfig.skipBatch) {\n      return next(req);\n    }\n\n    return passThroughBatch(req, next, {\n      batchTimeout,\n      batchUrl,\n      singleton,\n      maxBatchSize,\n      fetchOpts\n    });\n  };\n}\n\nfunction passThroughBatch(req, next, opts) {\n  const {\n    singleton\n  } = opts;\n  const bodyLength = req.getBody().length;\n\n  if (!bodyLength) {\n    return next(req);\n  }\n\n  if (!singleton.batcher || !singleton.batcher.acceptRequests) {\n    singleton.batcher = prepareNewBatcher(next, opts);\n  }\n\n  if (singleton.batcher.bodySize + bodyLength + 1 > opts.maxBatchSize) {\n    singleton.batcher = prepareNewBatcher(next, opts);\n  } // +1 accounts for tailing comma after joining\n\n\n  singleton.batcher.bodySize += bodyLength + 1; // queue request\n\n  return new Promise((resolve, reject) => {\n    const {\n      requestList\n    } = singleton.batcher;\n    const requestWrapper = {\n      req,\n      completeOk: res => {\n        requestWrapper.done = true;\n        resolve(res);\n        requestWrapper.duplicates.forEach(r => r.completeOk(res));\n      },\n      completeErr: err => {\n        requestWrapper.done = true;\n        reject(err);\n        requestWrapper.duplicates.forEach(r => r.completeErr(err));\n      },\n      done: false,\n      duplicates: []\n    };\n    const duplicateIndex = requestList.findIndex(wrapper => req.getBody() === wrapper.req.getBody());\n\n    if (duplicateIndex !== -1) {\n      /*\n        I've run into a scenario with Relay Classic where if you have 2 components\n        that make the exact same query, Relay will dedup the queries and reuse\n        the request ids but still make 2 requests. The batch code then loses track\n        of all the duplicate requests being made and never resolves or rejects\n        the duplicate requests\n        https://github.com/nodkz/react-relay-network-layer/pull/52\n      */\n      requestList[duplicateIndex].duplicates.push(requestWrapper);\n    } else {\n      requestList.push(requestWrapper);\n    }\n  });\n}\n\nfunction prepareNewBatcher(next, opts) {\n  const batcher = {\n    bodySize: 2,\n    // account for '[]'\n    requestList: [],\n    acceptRequests: true\n  };\n  setTimeout(() => {\n    batcher.acceptRequests = false;\n    sendRequests(batcher.requestList, next, opts).then(() => finalizeUncompleted(batcher.requestList)).catch(e => {\n      if (e && e.name === 'AbortError') {\n        finalizeCanceled(batcher.requestList, e);\n      } else {\n        finalizeUncompleted(batcher.requestList);\n      }\n    });\n  }, opts.batchTimeout);\n  return batcher;\n}\n\nasync function sendRequests(requestList, next, opts) {\n  if (requestList.length === 1) {\n    // SEND AS SINGLE QUERY\n    const wrapper = requestList[0];\n    const res = await next(wrapper.req);\n    wrapper.completeOk(res);\n    wrapper.duplicates.forEach(r => r.completeOk(res));\n    return res;\n  } else if (requestList.length > 1) {\n    // SEND AS BATCHED QUERY\n    const batchRequest = new RelayRequestBatch(requestList.map(wrapper => wrapper.req)); // $FlowFixMe\n\n    const url = await (isFunction(opts.batchUrl) ? opts.batchUrl(requestList) : opts.batchUrl);\n    batchRequest.setFetchOption('url', url);\n\n    const _opts$fetchOpts = opts.fetchOpts,\n          {\n      headersOrThunk\n    } = _opts$fetchOpts,\n          fetchOpts = _objectWithoutProperties(_opts$fetchOpts, [\"headersOrThunk\"]);\n\n    batchRequest.setFetchOptions(fetchOpts);\n\n    if (headersOrThunk) {\n      const headers = await (isFunction(headersOrThunk) ? headersOrThunk(batchRequest) : headersOrThunk);\n      batchRequest.setFetchOption('headers', headers);\n    }\n\n    try {\n      const batchResponse = await next(batchRequest);\n\n      if (!batchResponse || !Array.isArray(batchResponse.json)) {\n        throw new RRNLBatchMiddlewareError('Wrong response from server. Did your server support batch request?');\n      }\n\n      batchResponse.json.forEach((payload, index) => {\n        if (!payload) return;\n        const request = requestList[index];\n\n        if (request) {\n          const res = createSingleResponse(batchResponse, payload);\n          request.completeOk(res);\n        }\n      });\n      return batchResponse;\n    } catch (e) {\n      requestList.forEach(request => request.completeErr(e));\n    }\n  }\n\n  return Promise.resolve();\n} // check that server returns responses for all requests\n\n\nfunction finalizeCanceled(requestList, error) {\n  requestList.forEach(request => request.completeErr(error));\n} // check that server returns responses for all requests\n\n\nfunction finalizeUncompleted(requestList) {\n  requestList.forEach((request, index) => {\n    if (!request.done) {\n      request.completeErr(new RRNLBatchMiddlewareError(`Server does not return response for request at index ${index}.\\n` + `Response should have an array with ${requestList.length} item(s).`));\n    }\n  });\n}\n\nfunction createSingleResponse(batchResponse, json) {\n  // Fallback for graphql-graphene and apollo-server batch responses\n  const data = json.payload || json;\n  const res = batchResponse.clone();\n  res.processJsonData(data);\n  return res;\n}", "/* eslint-disable  */\nexport function isFunction(obj) {\n  return !!(obj && obj.constructor && obj.call && obj.apply);\n}", "function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport RRNLError from './RRNLError';\nexport default class RelayRequestBatch {\n  constructor(requests) {\n    this.requests = requests;\n    this.fetchOpts = {\n      method: 'POST',\n      headers: {},\n      body: this.prepareBody()\n    };\n  }\n\n  setFetchOption(name, value) {\n    this.fetchOpts[name] = value;\n  }\n\n  setFetchOptions(opts) {\n    this.fetchOpts = _objectSpread({}, this.fetchOpts, opts);\n  }\n\n  getBody() {\n    if (!this.fetchOpts.body) {\n      this.fetchOpts.body = this.prepareBody();\n    }\n\n    return this.fetchOpts.body || '';\n  }\n\n  prepareBody() {\n    return `[${this.requests.map(r => r.getBody()).join(',')}]`;\n  }\n\n  getIds() {\n    return this.requests.map(r => r.getID());\n  }\n\n  getID() {\n    return `BATCH_REQUEST:${this.getIds().join(':')}`;\n  }\n\n  isMutation() {\n    return false;\n  }\n\n  isFormData() {\n    return false;\n  }\n\n  clone() {\n    // $FlowFixMe\n    const newRequest = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n    newRequest.fetchOpts = _objectSpread({}, this.fetchOpts);\n    newRequest.fetchOpts.headers = _objectSpread({}, this.fetchOpts.headers);\n    return newRequest;\n  }\n\n  getVariables() {\n    throw new RRNLError('Batch request does not have variables.');\n  }\n\n  getQueryString() {\n    return this.prepareBody();\n  }\n\n}", "function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable no-param-reassign */\nimport { isFunction } from '../utils';\nimport RelayRequestBatch from '../RelayRequestBatch';\nimport RelayRequest from '../RelayRequest';\nimport { RRNLBatchMiddlewareError } from './batch'; // Max out at roughly 100kb (express-graphql imposed max)\n\nconst DEFAULT_BATCH_SIZE = 102400;\nexport default function legacyBatchMiddleware(options) {\n  const opts = options || {};\n  const batchTimeout = opts.batchTimeout || 0; // 0 is the same as nextTick in nodeJS\n\n  const allowMutations = opts.allowMutations || false;\n  const batchUrl = opts.batchUrl || '/graphql/batch';\n  const maxBatchSize = opts.maxBatchSize || DEFAULT_BATCH_SIZE;\n  const singleton = {};\n  const fetchOpts = {};\n  if (opts.method) fetchOpts.method = opts.method;\n  if (opts.credentials) fetchOpts.credentials = opts.credentials;\n  if (opts.mode) fetchOpts.mode = opts.mode;\n  if (opts.cache) fetchOpts.cache = opts.cache;\n  if (opts.redirect) fetchOpts.redirect = opts.redirect;\n  if (opts.headers) fetchOpts.headersOrThunk = opts.headers;\n  return next => req => {\n    // do not batch mutations unless allowMutations = true\n    if (req.isMutation() && !allowMutations) {\n      return next(req);\n    }\n\n    if (!(req instanceof RelayRequest)) {\n      throw new RRNLBatchMiddlewareError('Relay batch middleware accepts only simple RelayRequest. Did you add batchMiddleware twice?');\n    } // req with FormData can not be batched\n\n\n    if (req.isFormData()) {\n      return next(req);\n    }\n\n    return passThroughBatch(req, next, {\n      batchTimeout,\n      batchUrl,\n      singleton,\n      maxBatchSize,\n      fetchOpts\n    });\n  };\n}\n\nfunction passThroughBatch(req, next, opts) {\n  const {\n    singleton\n  } = opts;\n  const bodyLength = req.fetchOpts.body.length;\n\n  if (!bodyLength) {\n    return next(req);\n  }\n\n  if (!singleton.batcher || !singleton.batcher.acceptRequests) {\n    singleton.batcher = prepareNewBatcher(next, opts);\n  }\n\n  if (singleton.batcher.bodySize + bodyLength + 1 > opts.maxBatchSize) {\n    singleton.batcher = prepareNewBatcher(next, opts);\n  } // +1 accounts for tailing comma after joining\n\n\n  singleton.batcher.bodySize += bodyLength + 1; // queue request\n\n  return new Promise((resolve, reject) => {\n    const relayReqId = req.getID();\n    const {\n      requestMap\n    } = singleton.batcher;\n    const requestWrapper = {\n      req,\n      completeOk: res => {\n        requestWrapper.done = true;\n        resolve(res);\n        requestWrapper.duplicates.forEach(r => r.completeOk(res));\n      },\n      completeErr: err => {\n        requestWrapper.done = true;\n        reject(err);\n        requestWrapper.duplicates.forEach(r => r.completeErr(err));\n      },\n      done: false,\n      duplicates: []\n    };\n\n    if (requestMap[relayReqId]) {\n      /*\n        I've run into a scenario with Relay Classic where if you have 2 components\n        that make the exact same query, Relay will dedup the queries and reuse\n        the request ids but still make 2 requests. The batch code then loses track\n        of all the duplicate requests being made and never resolves or rejects\n        the duplicate requests\n        https://github.com/nodkz/react-relay-network-layer/pull/52\n      */\n      requestMap[relayReqId].duplicates.push(requestWrapper);\n    } else {\n      requestMap[relayReqId] = requestWrapper;\n    }\n  });\n}\n\nfunction prepareNewBatcher(next, opts) {\n  const batcher = {\n    bodySize: 2,\n    // account for '[]'\n    requestMap: {},\n    acceptRequests: true\n  };\n  setTimeout(() => {\n    batcher.acceptRequests = false;\n    sendRequests(batcher.requestMap, next, opts).then(() => finalizeUncompleted(batcher.requestMap)).catch(() => finalizeUncompleted(batcher.requestMap));\n  }, opts.batchTimeout);\n  return batcher;\n}\n\nasync function sendRequests(requestMap, next, opts) {\n  const ids = Object.keys(requestMap);\n\n  if (ids.length === 1) {\n    // SEND AS SINGLE QUERY\n    const request = requestMap[ids[0]];\n    const res = await next(request.req);\n    request.completeOk(res);\n    request.duplicates.forEach(r => r.completeOk(res));\n    return res;\n  } else if (ids.length > 1) {\n    // SEND AS BATCHED QUERY\n    const batchRequest = new RelayRequestBatch(ids.map(id => requestMap[id].req)); // $FlowFixMe\n\n    const url = await (isFunction(opts.batchUrl) ? opts.batchUrl(requestMap) : opts.batchUrl);\n    batchRequest.setFetchOption('url', url);\n\n    const _opts$fetchOpts = opts.fetchOpts,\n          {\n      headersOrThunk\n    } = _opts$fetchOpts,\n          fetchOpts = _objectWithoutProperties(_opts$fetchOpts, [\"headersOrThunk\"]);\n\n    batchRequest.setFetchOptions(fetchOpts);\n\n    if (headersOrThunk) {\n      const headers = await (isFunction(headersOrThunk) ? headersOrThunk(batchRequest) : headersOrThunk);\n      batchRequest.setFetchOption('headers', headers);\n    }\n\n    try {\n      const batchResponse = await next(batchRequest);\n\n      if (!batchResponse || !Array.isArray(batchResponse.json)) {\n        throw new RRNLBatchMiddlewareError('Wrong response from server. Did your server support batch request?');\n      }\n\n      batchResponse.json.forEach(payload => {\n        if (!payload) return;\n        const request = requestMap[payload.id];\n\n        if (request) {\n          const res = createSingleResponse(batchResponse, payload);\n          request.completeOk(res);\n        }\n      });\n      return batchResponse;\n    } catch (e) {\n      ids.forEach(id => {\n        requestMap[id].completeErr(e);\n      });\n    }\n  }\n\n  return Promise.resolve();\n} // check that server returns responses for all requests\n\n\nfunction finalizeUncompleted(requestMap) {\n  Object.keys(requestMap).forEach(id => {\n    const request = requestMap[id];\n\n    if (!request.done) {\n      request.completeErr(new RRNLBatchMiddlewareError(`Server does not return response for request with id ${id} \\n` + `Response should have following shape { \"id\": \"${id}\", \"data\": {} }`));\n    }\n  });\n}\n\nfunction createSingleResponse(batchResponse, json) {\n  // Fallback for graphql-graphene and apollo-server batch responses\n  const data = json.payload || json;\n  const res = batchResponse.clone();\n  res.processJsonData(data);\n  return res;\n}", "/* eslint-disable no-console */\nimport { isFunction } from '../utils';\nimport RRNLError from '../RRNLError';\n\nfunction noopFn() {}\n\nexport class RRNLRetryMiddlewareError extends RRNLError {\n  constructor(msg) {\n    super(msg);\n    this.name = 'RRNLRetryMiddlewareError';\n  }\n\n}\nexport default function retryMiddleware(options) {\n  const opts = options || {};\n  const timeout = opts.fetchTimeout || 15000;\n  const retryDelays = opts.retryDelays || [1000, 3000];\n  const statusCodes = opts.statusCodes || false;\n  const logger = opts.logger === false ? () => {} : opts.logger || console.log.bind(console, '[RELAY-NETWORK]');\n  const allowMutations = opts.allowMutations || false;\n  const allowFormData = opts.allowFormData || false;\n  const forceRetryFn = opts.forceRetry || false; // DEPRECATED in favor `beforeRetry`\n\n  const beforeRetry = opts.beforeRetry || false;\n\n  let retryAfterMs = () => false;\n\n  if (retryDelays) {\n    if (Array.isArray(retryDelays)) {\n      retryAfterMs = attempt => {\n        if (retryDelays.length >= attempt) {\n          return retryDelays[attempt];\n        }\n\n        return false;\n      };\n    } else if (isFunction(retryDelays)) {\n      retryAfterMs = retryDelays;\n    }\n  }\n\n  let timeoutAfterMs;\n\n  if (typeof timeout === 'number') {\n    timeoutAfterMs = () => timeout;\n  } else {\n    timeoutAfterMs = timeout;\n  }\n\n  let retryOnStatusCode = (status, req, res) => {\n    return res.status < 200 || res.status > 300;\n  };\n\n  if (statusCodes) {\n    if (Array.isArray(statusCodes)) {\n      retryOnStatusCode = (status, req, res) => statusCodes.indexOf(res.status) !== -1;\n    } else if (isFunction(statusCodes)) {\n      retryOnStatusCode = statusCodes;\n    }\n  }\n\n  return next => req => {\n    if (req.isMutation() && !allowMutations) {\n      return next(req);\n    }\n\n    if (req.isFormData() && !allowFormData) {\n      return next(req);\n    }\n\n    return makeRetriableRequest({\n      req,\n      next,\n      timeoutAfterMs,\n      retryAfterMs,\n      retryOnStatusCode,\n      forceRetryFn,\n      beforeRetry,\n      logger\n    });\n  };\n}\n\nasync function makeRetriableRequest(o, delay = 0, attempt = 0, lastError = null) {\n  const makeRetry = async prevError => {\n    const retryDelay = o.retryAfterMs(attempt);\n\n    if (retryDelay) {\n      o.logger(prevError.message);\n      o.logger(`will retry in ${retryDelay} milliseconds`);\n      return makeRetriableRequest(o, retryDelay, attempt + 1, prevError);\n    }\n\n    throw prevError;\n  };\n\n  const makeRequest = async () => {\n    try {\n      const timeout = o.timeoutAfterMs(attempt);\n      return await promiseWithTimeout(o.next(o.req), timeout, () => {\n        const err = new RRNLRetryMiddlewareError(`Reached request timeout in ${timeout} ms`);\n        return makeRetry(err);\n      });\n    } catch (e) {\n      // no response from server (no internet connection), make new attempt\n      if (e && !e.res && !(e instanceof RRNLRetryMiddlewareError) && e.name !== 'AbortError') {\n        return makeRetry(e);\n      } // response with invalid statusCode\n\n\n      if (e && e.res && o.retryOnStatusCode(e.res.status, o.req, e.res)) {\n        const err = new RRNLRetryMiddlewareError(`Wrong response status ${e.res.status}, retrying...`);\n        return makeRetry(err);\n      }\n\n      throw e;\n    }\n  };\n\n  if (attempt === 0) {\n    // first request should be without delay\n    return makeRequest();\n  } else {\n    // second and all further calls should be delayed\n    const {\n      promise,\n      forceExec,\n      abort\n    } = delayedExecution(makeRequest, delay);\n\n    if (o.forceRetryFn) {\n      // DEPRECATED in favor `beforeRetry`\n      o.forceRetryFn(forceExec, delay);\n    }\n\n    if (o.beforeRetry) {\n      o.beforeRetry({\n        abort,\n        forceRetry: forceExec,\n        attempt,\n        delay,\n        lastError,\n        req: o.req\n      });\n    }\n\n    return promise;\n  }\n}\n/**\n * This function delays execution of some function for some period of time.\n * Returns a promise, with ability to run execution immidiately, or abort it.\n */\n\n\nexport function delayedExecution(execFn, delay = 0) {\n  let abort = noopFn;\n  let forceExec = noopFn;\n\n  if (delay <= 0) {\n    return {\n      abort,\n      forceExec,\n      promise: execFn()\n    };\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    let delayId;\n\n    abort = msg => {\n      if (delayId) {\n        clearTimeout(delayId);\n        delayId = null;\n      }\n\n      reject(new RRNLRetryMiddlewareError(msg || 'Aborted in beforeRetry() callback'));\n    };\n\n    forceExec = () => {\n      if (delayId) {\n        clearTimeout(delayId);\n        delayId = null;\n        resolve(execFn());\n      }\n    };\n\n    delayId = setTimeout(() => {\n      resolve(execFn());\n    }, delay);\n  });\n  return {\n    forceExec,\n    abort,\n    promise\n  };\n}\n/*\n * This function accepts a Promise and watch for it some period of time (timeoutMS)\n * if Promise completed in this period, then returns its result\n * if not - returns other Promise from onTimeout() callback\n */\n\nexport function promiseWithTimeout(promise, timeoutMS, onTimeout) {\n  if (!timeoutMS) {\n    return promise;\n  }\n\n  return new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      onTimeout().then(resolve).catch(reject);\n    }, timeoutMS);\n    promise.then(res => {\n      clearTimeout(timeoutId);\n      resolve(res);\n    }).catch(err => {\n      clearTimeout(timeoutId);\n      reject(err);\n    });\n  });\n}", "/* eslint-disable no-param-reassign */\nimport { isFunction } from '../utils';\nexport default function urlMiddleware(opts) {\n  const {\n    url,\n    headers,\n    method = 'POST',\n    credentials,\n    mode,\n    cache,\n    redirect\n  } = opts || {};\n  const urlOrThunk = url || '/graphql';\n  const headersOrThunk = headers;\n  return next => async req => {\n    req.fetchOpts.url = await (isFunction(urlOrThunk) ? urlOrThunk(req) : urlOrThunk);\n\n    if (headersOrThunk) {\n      req.fetchOpts.headers = await (isFunction(headersOrThunk) ? headersOrThunk(req) : headersOrThunk);\n    }\n\n    if (method) req.fetchOpts.method = method;\n    if (credentials) req.fetchOpts.credentials = credentials;\n    if (mode) req.fetchOpts.mode = mode;\n    if (cache) req.fetchOpts.cache = cache;\n    if (redirect) req.fetchOpts.redirect = redirect;\n    return next(req);\n  };\n}", "/* eslint-disable no-param-reassign, arrow-body-style, dot-notation */\nimport { isFunction } from '../utils';\nimport RRNLError from '../RRNLError';\nexport class RRNLAuthMiddlewareError extends RRNLError {\n  constructor(msg) {\n    super(msg);\n    this.name = 'RRNLAuthMiddlewareError';\n  }\n\n}\nexport default function authMiddleware(opts) {\n  const {\n    token: tokenOrThunk,\n    tokenRefreshPromise,\n    allowEmptyToken = false,\n    prefix = 'Bearer ',\n    header = 'Authorization'\n  } = opts || {};\n  let tokenRefreshInProgress = null;\n  return next => async req => {\n    try {\n      // $FlowFixMe\n      const token = await (isFunction(tokenOrThunk) ? tokenOrThunk(req) : tokenOrThunk);\n\n      if (!token && tokenRefreshPromise && !allowEmptyToken) {\n        throw new RRNLAuthMiddlewareError('Empty token');\n      }\n\n      if (token) {\n        req.fetchOpts.headers[header] = `${prefix}${token}`;\n      }\n\n      const res = await next(req);\n      return res;\n    } catch (e) {\n      if (e && tokenRefreshPromise) {\n        if (e.message === 'Empty token' || e.res && e.res.status === 401) {\n          if (tokenRefreshPromise) {\n            if (!tokenRefreshInProgress) {\n              tokenRefreshInProgress = Promise.resolve(tokenRefreshPromise(req, e.res)).then(newToken => {\n                tokenRefreshInProgress = null;\n                return newToken;\n              }).catch(err => {\n                tokenRefreshInProgress = null;\n                throw err;\n              });\n            }\n\n            return tokenRefreshInProgress.then(newToken => {\n              if (!newToken && !allowEmptyToken) {\n                throw new RRNLAuthMiddlewareError('Empty token');\n              }\n\n              const newReq = req.clone();\n\n              if (newToken) {\n                newReq.fetchOpts.headers[header] = `${prefix}${newToken}`;\n              } else {\n                delete newReq.fetchOpts.headers[header];\n              }\n\n              return next(newReq); // re-run query with new token\n            });\n          }\n        }\n      }\n\n      throw e;\n    }\n  };\n}", "/* eslint-disable no-console */\nexport default function performanceMiddleware(opts) {\n  const logger = opts && opts.logger || console.log.bind(console, '[RELAY-NETWORK]');\n  return next => req => {\n    const start = new Date().getTime();\n    return next(req).then(res => {\n      const end = new Date().getTime();\n      logger(`[${end - start}ms] ${req.getID()}`, req, res);\n      return res;\n    });\n  };\n}", "function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-console */\nimport RelayRequest from '../RelayRequest';\nimport RelayRequestBatch from '../RelayRequestBatch';\nexport default function loggerMiddleware(opts) {\n  const logger = opts && opts.logger || console.log.bind(console, '[RELAY-NETWORK]');\n  return next => req => {\n    const start = new Date().getTime();\n    logger(`Run ${req.getID()}`, req);\n    return next(req).then(res => {\n      const end = new Date().getTime();\n      let queryId;\n      let queryData;\n\n      if (req instanceof RelayRequest) {\n        queryId = req.getID();\n        queryData = {\n          query: req.getQueryString(),\n          variables: req.getVariables()\n        };\n      } else if (req instanceof RelayRequestBatch) {\n        queryId = req.getID();\n        queryData = {\n          requestList: req.requests,\n          responseList: res.json\n        };\n      } else {\n        queryId = 'CustomRequest';\n        queryData = {};\n      }\n\n      logger(`Done ${queryId} in ${end - start}ms`, _objectSpread({}, queryData, {\n        req,\n        res\n      }));\n\n      if (res.status !== 200) {\n        logger(`Status ${res.status}: ${res.statusText || ''} for ${queryId}`);\n      }\n\n      return res;\n    }, error => {\n      if (error && error.name && error.name === 'AbortError') {\n        logger(`Cancelled ${req.getID()}`);\n      }\n\n      throw error;\n    });\n  };\n}", "function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable no-console */\nimport RelayRequest from '../RelayRequest';\nimport RelayRequestBatch from '../RelayRequestBatch';\nexport default function errorMiddleware(options) {\n  const opts = options || {};\n  const logger = opts.logger || console.error.bind(console);\n  const prefix = opts.prefix || '[RELAY-NETWORK] GRAPHQL SERVER ERROR:\\n\\n';\n  const disableServerMiddlewareTip = opts.disableServerMiddlewareTip || false;\n\n  function displayErrors(errors, reqRes) {\n    return errors.forEach(error => {\n      const {\n        message,\n        stack\n      } = error,\n            rest = _objectWithoutProperties(error, [\"message\", \"stack\"]);\n\n      let msg = `${prefix}`;\n      const fmt = [];\n\n      if (stack && Array.isArray(stack)) {\n        msg = `${msg}%c${stack.shift()}\\n%c${stack.join('\\n')}`;\n        fmt.push('font-weight: bold;', 'font-weight: normal;');\n      } else {\n        msg = `${msg}%c${message} %c`;\n        fmt.push('font-weight: bold;', 'font-weight: normal;');\n      }\n\n      if (rest && Object.keys(rest).length) {\n        msg = `${msg}\\n  %O`;\n        fmt.push(rest);\n      }\n\n      msg = `${msg}\\n\\n%cRequest Response data:\\n  %c%O`;\n      fmt.push('font-weight: bold;', 'font-weight: normal;', reqRes);\n\n      if (!stack && !disableServerMiddlewareTip) {\n        msg = `${msg}\\n\\n%cNotice:%c${noticeAbsentStack()}`;\n        fmt.push('font-weight: bold;', 'font-weight: normal;');\n      }\n\n      logger(`${msg}\\n\\n`, ...fmt);\n    });\n  }\n\n  return next => req => {\n    return next(req).then(res => {\n      if (req instanceof RelayRequest) {\n        if (Array.isArray(res.errors)) {\n          displayErrors(res.errors, {\n            req,\n            res\n          });\n        }\n      } else if (req instanceof RelayRequestBatch) {\n        if (Array.isArray(res.json)) {\n          res.json.forEach(payload => {\n            if (Array.isArray(payload.errors)) {\n              displayErrors(payload.errors, {\n                req,\n                res\n              });\n            }\n          });\n        }\n      }\n\n      return res;\n    });\n  };\n}\n\nfunction noticeAbsentStack() {\n  return `\n    If you using 'express-graphql', you may get server stack-trace for error.\n    Just tune 'formatError' to return 'stack' with stack-trace:\n\n    import graphqlHTTP from 'express-graphql';\n\n    const graphQLMiddleware = graphqlHTTP({\n      schema: myGraphQLSchema,\n      formatError: (error) => ({\n        message: error.message,\n        stack: process.env.NODE_ENV === 'development' ? error.stack.split('\\\\n') : null,\n      })\n    });\n\n    app.use('/graphql', graphQLMiddleware);`;\n}", "import { QueryResponseCache } from 'relay-runtime';\nimport { isFunction } from '../utils';\nexport default function cacheMiddleware(opts) {\n  const {\n    size,\n    ttl,\n    onInit,\n    allowMutations,\n    allowFormData,\n    clearOnMutation,\n    cacheErrors\n  } = opts || {};\n  const cache = new QueryResponseCache({\n    size: size || 100,\n    // 100 requests\n    ttl: ttl || 15 * 60 * 1000 // 15 minutes\n\n  });\n\n  if (isFunction(onInit)) {\n    onInit(cache);\n  }\n\n  return next => async req => {\n    if (req.isMutation()) {\n      if (clearOnMutation) {\n        cache.clear();\n      }\n\n      if (!allowMutations) {\n        return next(req);\n      }\n    }\n\n    if (req.isFormData() && !allowFormData) {\n      return next(req);\n    }\n\n    if (req.cacheConfig && req.cacheConfig.force) {\n      const queryId = req.getID();\n      const variables = req.getVariables();\n      const res = await next(req);\n\n      if (!res.errors || res.errors && cacheErrors) {\n        cache.set(queryId, variables, res);\n      }\n\n      return res;\n    }\n\n    try {\n      const queryId = req.getID();\n      const variables = req.getVariables();\n      const cachedRes = cache.get(queryId, variables);\n\n      if (cachedRes) {\n        return cachedRes;\n      }\n\n      const res = await next(req);\n\n      if (!res.errors || res.errors && cacheErrors) {\n        cache.set(queryId, variables, res);\n      }\n\n      return res;\n    } catch (e) {\n      // if error, just log it to console\n      console.log(e); // eslint-disable-line\n    }\n\n    return next(req);\n  };\n}", "/* eslint-disable no-await-in-loop */\nfunction createProgressHandler(opts) {\n  const {\n    onProgress,\n    sizeHeader = 'Content-Length'\n  } = opts || {};\n  return async res => {\n    const {\n      body,\n      headers\n    } = res;\n\n    if (!body) {\n      return;\n    }\n\n    const totalResponseSize = headers.get(sizeHeader);\n    let totalSize = null;\n\n    if (totalResponseSize !== null) {\n      totalSize = parseInt(totalResponseSize, 10);\n    }\n\n    const reader = body.getReader();\n    let completed = false;\n    let runningTotal = 0;\n\n    do {\n      const step = await reader.read();\n      const {\n        done,\n        value\n      } = step;\n      const length = value && value.length || 0;\n      completed = done;\n\n      if (!completed) {\n        runningTotal += length;\n        onProgress(runningTotal, totalSize);\n      }\n    } while (!completed);\n  };\n}\n\nexport default function progressMiddleware(opts) {\n  const progressHandler = createProgressHandler(opts);\n\n  const mw = next => async req => {\n    const res = await next(req);\n    progressHandler(res.clone());\n    return res;\n  };\n\n  mw.isRawMiddleware = true;\n  return mw;\n}", "import { extractFiles } from 'extract-files';\nimport RelayRequestBatch from '../RelayRequestBatch';\nexport default function uploadMiddleware() {\n  return next => async req => {\n    if (req instanceof RelayRequestBatch) {\n      throw new Error('RelayRequestBatch is not supported');\n    }\n\n    const operations = {\n      query: req.operation.text,\n      variables: req.variables\n    };\n    const {\n      clone: extractedOperations,\n      files\n    } = extractFiles(operations);\n\n    if (files.size) {\n      const formData = new FormData();\n      formData.append('operations', JSON.stringify(extractedOperations));\n      const pathMap = {};\n      let i = 0;\n      files.forEach(paths => {\n        pathMap[++i] = paths;\n      });\n      formData.append('map', JSON.stringify(pathMap));\n      i = 0;\n      files.forEach((paths, file) => {\n        formData.append(++i, file, file.name);\n      });\n      req.fetchOpts.method = 'POST';\n      req.fetchOpts.body = formData;\n      delete req.fetchOpts.headers['Content-Type'];\n    }\n\n    const res = await next(req);\n    return res;\n  };\n}", "export { default as ReactNativeFile } from './ReactNativeFile.js';\nexport { default as extractFiles } from './extractFiles.js';\nexport { default as isExtractableFile } from './isExtractableFile.js';\n", "function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default function (graphqlHTTPMiddleware) {\n  return (req, res) => {\n    const subResponses = [];\n    return Promise.all(req.body.map(data => new Promise(resolve => {\n      const subRequest = _objectSpread({\n        __proto__: req.__proto__\n      }, req, {\n        body: data\n      });\n\n      const subResponse = _objectSpread({}, res, {\n        status(st) {\n          this.statusCode = st;\n          return this;\n        },\n\n        set() {\n          return this;\n        },\n\n        send(payload) {\n          resolve({\n            status: this.statusCode,\n            id: data.id,\n            payload\n          });\n        },\n\n        // support express-graphql@0.5.2\n        setHeader() {\n          return this;\n        },\n\n        header() {},\n\n        write(payload) {\n          this.payload = payload;\n        },\n\n        end(payload) {\n          // support express-graphql@0.5.4\n          if (payload) {\n            this.payload = payload;\n          }\n\n          resolve({\n            status: this.statusCode,\n            id: data.id,\n            payload: this.payload\n          });\n        }\n\n      });\n\n      subResponses.push(subResponse);\n      graphqlHTTPMiddleware(subRequest, subResponse);\n    }))).then(responses => {\n      let response = '';\n      responses.forEach(({\n        status,\n        id,\n        payload\n      }, idx) => {\n        if (status) {\n          res.status(status);\n        }\n\n        const comma = responses.length - 1 > idx ? ',' : '';\n        response += `{ \"id\":\"${id}\", \"payload\":${payload} }${comma}`;\n      });\n      res.set('Content-Type', 'application/json');\n      res.send(`[${response}]`);\n    }).catch(err => {\n      res.status(500).send({\n        error: err.message\n      });\n    });\n  };\n}"],
  "mappings": ";;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAEA,WAAO,UAAU,yBAAyB,MAAM;AAC9C,UAAI,MAAM,KAAK,KACb,OAAO,KAAK,MACZ,OAAO,KAAK;AACd,WAAK,MAAM;AACX,WAAK,OAAO;AACZ,WAAK,OAAO;AAAA;AAAA;AAAA;;;ACRd;AAAA;AAAA;AAAA;AAEA,QAAI,kBAAkB;AAEtB,WAAO,UAAU,2BAA2B,OAAO;AACjD,aACG,OAAO,SAAS,eAAe,iBAAiB,QAChD,OAAO,SAAS,eAAe,iBAAiB,QACjD,iBAAiB;AAAA;AAAA;AAAA;;;ACRrB;AAAA;AAAA;AAAA;AAEA,QAAI,2BAA2B;AAE/B,WAAO,UAAU,sBAAsB,OAAO,MAAM,mBAAmB;AACrE,UAAI,SAAS,QAAQ;AACnB,eAAO;AAAA;AAGT,UAAI,sBAAsB,QAAQ;AAChC,4BAAoB;AAAA;AAGtB,UAAI;AACJ,UAAI,QAAQ,IAAI;AAEhB,uBAAiB,OAAO,MAAM;AAC5B,YAAI,cAAc,MAAM,IAAI;AAC5B,YAAI;AAAa,sBAAY,KAAK,MAAM,aAAa;AAAA;AAChD,gBAAM,IAAI,MAAM;AAAA;AAGvB,UAAI,kBAAkB,QAAQ;AAC5B,gBAAQ;AACR,gBAAQ,CAAC,OAAO;AAAA,aACX;AACL,YAAI,SAAS,OAAO,OAAO,MAAM;AACjC,YAAI,OAAO,aAAa,eAAe,iBAAiB;AACtD,kBAAQ,MAAM,UAAU,IAAI,KAAK,OAAO,SAAU,MAAM,IAAG;AACzD,oBAAQ,CAAC,KAAK,SAAS,KAAI;AAC3B,mBAAO;AAAA;AAAA,iBAEF,MAAM,QAAQ;AACrB,kBAAQ,MAAM,IAAI,SAAU,OAAO,IAAG;AACpC,gBAAI,UAAS,aAAa,OAAO,KAAK,SAAS,IAAG;AAClD,oBAAO,MAAM,QAAQ;AACrB,mBAAO,QAAO;AAAA;AAAA,iBAET,SAAS,MAAM,gBAAgB,QAAQ;AAC9C,kBAAQ;AAER,mBAAS,KAAK,OAAO;AACnB,gBAAI,SAAS,aAAa,MAAM,IAAI,KAAK,SAAS,GAAG;AACrD,mBAAO,MAAM,QAAQ;AACrB,kBAAM,KAAK,OAAO;AAAA;AAAA;AAEf,kBAAQ;AAAA;AAGjB,aAAO;AAAA,QACL;AAAA,QACA;AAAA;AAAA;AAAA;AAAA;;;ACnDJ;;;ACAA;;;ACAA;AAAA,2BAAwB;;;ACAxB;;;ACAA;AAAA,8BAAuC,MAAM;AAAA,EAC3C,YAAY,KAAK;AACf,UAAM;AACN,SAAK,OAAO;AAAA;AAAA;;;ADHhB,uBAAuB,QAAQ;AAAE,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAAE,QAAI,SAAS,UAAU,MAAM,OAAO,UAAU,KAAK;AAAI,QAAI,UAAU,OAAO,KAAK;AAAS,QAAI,OAAO,OAAO,0BAA0B,YAAY;AAAE,gBAAU,QAAQ,OAAO,OAAO,sBAAsB,QAAQ,OAAO,SAAU,KAAK;AAAE,eAAO,OAAO,yBAAyB,QAAQ,KAAK;AAAA;AAAA;AAAmB,YAAQ,QAAQ,SAAU,KAAK;AAAE,sBAAgB,QAAQ,KAAK,OAAO;AAAA;AAAA;AAAa,SAAO;AAAA;AAExd,yBAAyB,KAAK,KAAK,OAAO;AAAE,MAAI,OAAO,KAAK;AAAE,WAAO,eAAe,KAAK,KAAK,EAAE,OAAc,YAAY,MAAM,cAAc,MAAM,UAAU;AAAA,SAAgB;AAAE,QAAI,OAAO;AAAA;AAAS,SAAO;AAAA;AAI3M,gCAAgC;AAC9B,SAAO,OAAO,WAAW,eAAe,OAAO,YAAY,yBAAU,sBAAO;AAAA;AAG9E,yBAAkC;AAAA,EAChC,YAAY,WAAW,WAAW,aAAa,aAAa;AAC1D,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,KAAK,KAAK,UAAU,MAAM,KAAK,UAAU,QAAQ,KAAK;AAC3D,UAAM,YAAY;AAAA,MAChB,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,MAAM,KAAK;AAAA;AAEb,SAAK,aAAa,OAAO,WAAW,eAAe,OAAO,kBAAkB,IAAI,OAAO,oBAAoB;AAC3G,QAAI,KAAK;AAAY,gBAAU,SAAS,KAAK,WAAW;AACxD,SAAK,YAAY;AAAA;AAAA,EAGnB,UAAU;AACR,WAAO,KAAK,UAAU;AAAA;AAAA,EAGxB,cAAc;AACZ,UAAM;AAAA,MACJ;AAAA,QACE;AAEJ,QAAI,aAAa;AACf,YAAM,aAAa;AAEnB,UAAI,CAAC,YAAY;AACf,cAAM,IAAI,UAAU;AAAA;AAGtB,YAAM,WAAW,IAAI;AACrB,eAAS,OAAO,MAAM,KAAK;AAC3B,eAAS,OAAO,SAAS,KAAK;AAC9B,eAAS,OAAO,aAAa,KAAK,UAAU,KAAK;AACjD,aAAO,KAAK,aAAa,QAAQ,SAAO;AACtC,YAAI,OAAO,UAAU,eAAe,KAAK,aAAa,MAAM;AAC1D,mBAAS,OAAO,KAAK,YAAY;AAAA;AAAA;AAGrC,aAAO;AAAA;AAGT,WAAO,KAAK,UAAU;AAAA,MACpB,IAAI,KAAK;AAAA,MACT,OAAO,KAAK;AAAA,MACZ,WAAW,KAAK;AAAA;AAAA;AAAA,EAIpB,QAAQ;AACN,WAAO,KAAK;AAAA;AAAA,EAGd,cAAc;AACZ,QAAI,CAAC,KAAK,YAAY,WAAW;AAC/B,WAAK,YAAY,YAAY;AAAA;AAG/B,SAAK,YAAY,aAAa;AAC9B,WAAO,KAAK,YAAY,UAAU;AAAA;AAAA,EAGpC,iBAAiB;AACf,WAAO,KAAK,UAAU,QAAQ;AAAA;AAAA,EAGhC,eAAe;AACb,WAAO,KAAK;AAAA;AAAA,EAGd,aAAa;AACX,WAAO,KAAK,UAAU,kBAAkB;AAAA;AAAA,EAG1C,aAAa;AACX,UAAM,aAAa;AAEnB,WAAO,CAAC,CAAC,cAAc,KAAK,UAAU,gBAAgB;AAAA;AAAA,EAGxD,SAAS;AACP,QAAI,KAAK,YAAY;AACnB,WAAK,WAAW;AAChB,aAAO;AAAA;AAGT,WAAO;AAAA;AAAA,EAGT,QAAQ;AAEN,UAAM,aAAa,OAAO,OAAO,OAAO,OAAO,OAAO,eAAe,QAAQ;AAC7E,eAAW,YAAY,cAAc,IAAI,KAAK;AAC9C,eAAW,UAAU,UAAU,cAAc,IAAI,KAAK,UAAU;AAChE,WAAO;AAAA;AAAA;;;AE3GX;;;ACAA;AAEO,qCAA+B,UAAU;AAAA,EAC9C,YAAY,KAAK;AACf,UAAM;AACN,SAAK,OAAO;AAAA;AAAA;AAQT,6BAA6B,SAAS,QAAQ;AACnD,QAAM,iBAAiB;AACvB,QAAM,iBAAiB;AAEvB,MAAI,CAAC,QAAQ,gBAAgB;AAC3B,WAAO,OAAO,KAAK;AAAA;AAGrB,MAAI,aAAa;AACjB,QAAM,cAAc,QAAQ;AAE5B,MAAI,aAAa;AAEf,iBAAa,YAAY,MAAM;AAAA;AAGjC,SAAO,OAAO,IAAI,CAAC;AAAA,IACjB;AAAA,IACA;AAAA,KACC,OAAO;AACR,UAAM,SAAS,GAAG,KAAK;AACvB,UAAM,SAAS,IAAI,OAAO,OAAO;AAEjC,UAAM,kBAAkB,aAAa,WAAW,SAAS,OAAO,UAAU,IAAI,CAAC;AAAA,MAC7E;AAAA,MACA;AAAA,UACI;AACJ,YAAM,YAAY,WAAW,OAAO;AACpC,YAAM,SAAS,KAAK,IAAI,SAAS,GAAG;AACpC,aAAO,CAAC,UAAU,OAAO,SAAS,IAAI,QAAQ,iBAAiB,GAAG,IAAI,OAAO,KAAK,IAAI,QAAQ,UAAU,IAAI,iBAAe,SAAS,aAAa,KAAK;AAAA,OACrJ,KAAK,QAAQ;AAChB,WAAO,SAAS,UAAU;AAAA,KACzB,KAAK;AAAA;AAEH,4BAA4B,KAAK,KAAK;AAC3C,MAAI,cAAc;AAElB,MAAI,CAAC,KAAK;AACR,kBAAc;AAAA,aACL,IAAI,QAAQ;AACrB,QAAI,eAAe,cAAc;AAC/B,oBAAc,oBAAoB,KAAK,IAAI;AAAA,WACtC;AACL,oBAAc,KAAK,UAAU,IAAI;AAAA;AAAA,aAE1B,CAAC,IAAI,MAAM;AACpB,kBAAe,KAAI,OAAO,IAAI,OAAO,kDAAkD,IAAI,aAAc,OAAM;AAAA;AAAA,EAAO,IAAI,eAAe;AAAA,aAChI,CAAC,IAAI,MAAM;AACpB,kBAAc,2CAA2C,IAAI;AAAA;AAG/D,QAAM,QAAQ,IAAI,iBAAiB,uBAAuB,IAAI;AAAA;AAAA,EAAiD;AAC/G,QAAM,MAAM;AACZ,QAAM,MAAM;AACZ,SAAO;AAAA;;;ACnET;AAAA,0BAAmC;AAAA,eAEpB,gBAAgB,KAAK;AAChC,UAAM,IAAI,IAAI;AACd,MAAE,OAAO;AACT,MAAE,KAAK,IAAI;AACX,MAAE,SAAS,IAAI;AACf,MAAE,MAAM,IAAI;AACZ,MAAE,UAAU,IAAI;AAEhB,QAAI,IAAI,SAAS,OAAO,IAAI,UAAU,KAAK;AACzC,QAAE,OAAO,MAAM,IAAI;AAAA,WACd;AACL,QAAE,gBAAiB,MAAM,IAAI;AAAA;AAG/B,WAAO;AAAA;AAAA,eAGI,kBAAkB,KAAK;AAClC,UAAM,IAAI,IAAI;AACd,MAAE,OAAO;AACT,MAAE,KAAK;AACP,MAAE,SAAS;AACX,MAAE,OAAO,IAAI;AACb,MAAE,SAAS,IAAI;AACf,WAAO;AAAA;AAAA,EAGT,gBAAgB,MAAM;AACpB,SAAK,OAAO;AAEZ,QAAI,MAAM;AACR,UAAI,KAAK;AAAM,aAAK,OAAO,KAAK;AAChC,UAAI,KAAK;AAAQ,aAAK,SAAS,KAAK;AAAA;AAAA;AAAA,EAIxC,QAAQ;AAEN,WAAO,OAAO,OAAO,OAAO,OAAO,OAAO,eAAe,QAAQ;AAAA;AAAA,EAGnE,WAAW;AACT,WAAO,CAAC,aAAa,WAAW,KAAK,OAAO,MAAM,mBAAmB,KAAK,UAAU,MAAM,mBAAmB,KAAK,cAAc,MAAM,wBAAwB,KAAK,UAAU,KAAK,YAAY,MAAM,qBAAqB,KAAK,UAAU,KAAK,SAAS,MAAM,KAAK;AAAA;AAAA;;;AFxCrQ,kBAAkB,KAAK;AACrB,MAAI;AAAA,IACF;AAAA,MACE,IAAI;AACR,MAAI,CAAC;AAAK,UAAM;AAChB,MAAI,CAAC,IAAI,UAAU,QAAQ;AAAQ,QAAI,UAAU,QAAQ,SAAS;AAElE,MAAI,CAAC,IAAI,UAAU,QAAQ,mBAAmB,CAAC,IAAI,cAAc;AAC/D,QAAI,UAAU,QAAQ,kBAAkB;AAAA;AAG1C,SAAO,MAAM,KAAK,IAAI;AAAA;AAIxB,IAAM,kBAAkB,UAAQ,OAAM,QAAO;AAC3C,QAAM,eAAe,MAAM,KAAK;AAChC,QAAM,MAAM,MAAM,cAAc,gBAAgB;AAEhD,MAAI,IAAI,UAAU,IAAI,UAAU,KAAK;AACnC,UAAM,mBAAmB,KAAK;AAAA;AAGhC,SAAO;AAAA;AAGM,6BAA6B,KAAK,aACjD,qBACA,SAAS;AAEP,QAAM,eAAe,QAAQ,GAAG,aAAa,iBAAiB,GAAG,qBAAqB;AACtF,SAAO,aAAa,KAAK,KAAK,SAAO;AACnC,QAAI,CAAC,WAAY,EAAC,OAAO,IAAI,UAAU,CAAC,IAAI,OAAO;AACjD,YAAM,mBAAmB,KAAK;AAAA;AAGhC,WAAO;AAAA;AAAA;AAcX,oBAAoB,OAAO;AACzB,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,SAAO;AAAA,SACT;AACL,UAAM,OAAO,MAAM,MAAM,SAAS;AAClC,UAAM,OAAO,MAAM,MAAM,GAAG;AAE5B,WAAO,IAAI,SAAS,KAAK,YAAY,CAAC,UAAU,MAAM,EAAE,WAAW,KAAK,GAAG;AAAA;AAAA;;;AH1D/E,8BAAuC;AAAA,EACrC,YAAY,aAAa,MAAM;AAC7B,SAAK,eAAe;AACpB,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AACxB,SAAK,UAAU;AACf,UAAM,MAAM,MAAM,QAAQ,eAAe,cAAc,CAAC;AACxD,QAAI,QAAQ,QAAM;AAChB,UAAI,IAAI;AACN,YAAI,GAAG,SAAS;AACd,eAAK,iBAAiB,KAAK,GAAG;AAAA,mBACrB,GAAG,iBAAiB;AAC7B,eAAK,gBAAgB,KAAK;AAAA,eACrB;AACL,eAAK,aAAa,KAAK;AAAA;AAAA;AAAA;AAK7B,QAAI,MAAM;AACR,WAAK,cAAc,KAAK;AACxB,WAAK,UAAU,KAAK,YAAY;AAEhC,UAAI,KAAK,aAAa;AACpB,aAAK,iBAAiB,KAAK,KAAK;AAAA;AAAA;AAIpC,SAAK,UAAU,CAAC,WAAW,WAAW,aAAa,gBAAgB;AACjE,eAAS,IAAI,GAAG,IAAI,KAAK,iBAAiB,QAAQ,KAAK;AACrD,cAAM,MAAM,KAAK,iBAAiB,GAAG,WAAW,WAAW,aAAa;AAExE,YAAI;AAAK,iBAAO;AAAA;AAGlB,aAAO;AAAA,QACL,WAAW,UAAQ;AACjB,gBAAM,MAAM,IAAI,aAAa,WAAW,WAAW,aAAa;AAChE,gBAAM,MAAM,oBAAoB,KAAK,KAAK,cAAc,KAAK,iBAAiB,KAAK;AACnF,cAAI,KAAK,WAAS;AAChB,iBAAK,KAAK;AACV,iBAAK;AAAA,aACJ,WAAS;AACV,gBAAI,SAAS,MAAM,QAAQ,MAAM,SAAS,cAAc;AACtD,mBAAK;AAAA;AACA,mBAAK,MAAM;AAAA,aAEnB,MAAM,MAAM;AAAA;AACb,iBAAO,MAAM;AACX,gBAAI;AAAA;AAAA;AAAA;AAAA;AAMZ,UAAM,UAAU,6BAAQ,OAAO,KAAK,SAAS,KAAK;AAClD,SAAK,UAAU,QAAQ;AACvB,SAAK,oBAAoB,QAAQ;AAAA;AAAA;;;AM5DrC;;;ACAA;AACO,oBAAoB,KAAK;AAC9B,SAAO,CAAC,CAAE,QAAO,IAAI,eAAe,IAAI,QAAQ,IAAI;AAAA;;;ACFtD;AAAA,wBAAuB,QAAQ;AAAE,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAAE,QAAI,SAAS,UAAU,MAAM,OAAO,UAAU,KAAK;AAAI,QAAI,UAAU,OAAO,KAAK;AAAS,QAAI,OAAO,OAAO,0BAA0B,YAAY;AAAE,gBAAU,QAAQ,OAAO,OAAO,sBAAsB,QAAQ,OAAO,SAAU,KAAK;AAAE,eAAO,OAAO,yBAAyB,QAAQ,KAAK;AAAA;AAAA;AAAmB,YAAQ,QAAQ,SAAU,KAAK;AAAE,uBAAgB,QAAQ,KAAK,OAAO;AAAA;AAAA;AAAa,SAAO;AAAA;AAExd,0BAAyB,KAAK,KAAK,OAAO;AAAE,MAAI,OAAO,KAAK;AAAE,WAAO,eAAe,KAAK,KAAK,EAAE,OAAc,YAAY,MAAM,cAAc,MAAM,UAAU;AAAA,SAAgB;AAAE,QAAI,OAAO;AAAA;AAAS,SAAO;AAAA;AAG3M,8BAAuC;AAAA,EACrC,YAAY,UAAU;AACpB,SAAK,WAAW;AAChB,SAAK,YAAY;AAAA,MACf,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,MAAM,KAAK;AAAA;AAAA;AAAA,EAIf,eAAe,MAAM,OAAO;AAC1B,SAAK,UAAU,QAAQ;AAAA;AAAA,EAGzB,gBAAgB,MAAM;AACpB,SAAK,YAAY,eAAc,IAAI,KAAK,WAAW;AAAA;AAAA,EAGrD,UAAU;AACR,QAAI,CAAC,KAAK,UAAU,MAAM;AACxB,WAAK,UAAU,OAAO,KAAK;AAAA;AAG7B,WAAO,KAAK,UAAU,QAAQ;AAAA;AAAA,EAGhC,cAAc;AACZ,WAAO,IAAI,KAAK,SAAS,IAAI,OAAK,EAAE,WAAW,KAAK;AAAA;AAAA,EAGtD,SAAS;AACP,WAAO,KAAK,SAAS,IAAI,OAAK,EAAE;AAAA;AAAA,EAGlC,QAAQ;AACN,WAAO,iBAAiB,KAAK,SAAS,KAAK;AAAA;AAAA,EAG7C,aAAa;AACX,WAAO;AAAA;AAAA,EAGT,aAAa;AACX,WAAO;AAAA;AAAA,EAGT,QAAQ;AAEN,UAAM,aAAa,OAAO,OAAO,OAAO,OAAO,OAAO,eAAe,QAAQ;AAC7E,eAAW,YAAY,eAAc,IAAI,KAAK;AAC9C,eAAW,UAAU,UAAU,eAAc,IAAI,KAAK,UAAU;AAChE,WAAO;AAAA;AAAA,EAGT,eAAe;AACb,UAAM,IAAI,UAAU;AAAA;AAAA,EAGtB,iBAAiB;AACf,WAAO,KAAK;AAAA;AAAA;;;AFhEhB,kCAAkC,QAAQ,UAAU;AAAE,MAAI,UAAU;AAAM,WAAO;AAAI,MAAI,SAAS,8BAA8B,QAAQ;AAAW,MAAI,KAAK;AAAG,MAAI,OAAO,uBAAuB;AAAE,QAAI,mBAAmB,OAAO,sBAAsB;AAAS,SAAK,IAAI,GAAG,IAAI,iBAAiB,QAAQ,KAAK;AAAE,YAAM,iBAAiB;AAAI,UAAI,SAAS,QAAQ,QAAQ;AAAG;AAAU,UAAI,CAAC,OAAO,UAAU,qBAAqB,KAAK,QAAQ;AAAM;AAAU,aAAO,OAAO,OAAO;AAAA;AAAA;AAAU,SAAO;AAAA;AAEne,uCAAuC,QAAQ,UAAU;AAAE,MAAI,UAAU;AAAM,WAAO;AAAI,MAAI,SAAS;AAAI,MAAI,aAAa,OAAO,KAAK;AAAS,MAAI,KAAK;AAAG,OAAK,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAAE,UAAM,WAAW;AAAI,QAAI,SAAS,QAAQ,QAAQ;AAAG;AAAU,WAAO,OAAO,OAAO;AAAA;AAAQ,SAAO;AAAA;AAQ1S,IAAM,qBAAqB;AACpB,6CAAuC,UAAU;AAAA,EACtD,YAAY,KAAK;AACf,UAAM;AACN,SAAK,OAAO;AAAA;AAAA;AAID,yBAAyB,SAAS;AAC/C,QAAM,OAAO,WAAW;AACxB,QAAM,eAAe,KAAK,gBAAgB;AAE1C,QAAM,iBAAiB,KAAK,kBAAkB;AAC9C,QAAM,WAAW,KAAK,YAAY;AAClC,QAAM,eAAe,KAAK,gBAAgB;AAC1C,QAAM,YAAY;AAClB,QAAM,YAAY;AAClB,MAAI,KAAK;AAAQ,cAAU,SAAS,KAAK;AACzC,MAAI,KAAK;AAAa,cAAU,cAAc,KAAK;AACnD,MAAI,KAAK;AAAM,cAAU,OAAO,KAAK;AACrC,MAAI,KAAK;AAAO,cAAU,QAAQ,KAAK;AACvC,MAAI,KAAK;AAAU,cAAU,WAAW,KAAK;AAC7C,MAAI,KAAK;AAAS,cAAU,iBAAiB,KAAK;AAClD,SAAO,UAAQ,SAAO;AAEpB,QAAI,IAAI,gBAAgB,CAAC,gBAAgB;AACvC,aAAO,KAAK;AAAA;AAGd,QAAI,CAAE,gBAAe,eAAe;AAClC,YAAM,IAAI,yBAAyB;AAAA;AAIrC,QAAI,IAAI,cAAc;AACpB,aAAO,KAAK;AAAA;AAId,QAAI,IAAI,YAAY,WAAW;AAC7B,aAAO,KAAK;AAAA;AAGd,WAAO,iBAAiB,KAAK,MAAM;AAAA,MACjC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA;AAKN,0BAA0B,KAAK,MAAM,MAAM;AACzC,QAAM;AAAA,IACJ;AAAA,MACE;AACJ,QAAM,aAAa,IAAI,UAAU;AAEjC,MAAI,CAAC,YAAY;AACf,WAAO,KAAK;AAAA;AAGd,MAAI,CAAC,UAAU,WAAW,CAAC,UAAU,QAAQ,gBAAgB;AAC3D,cAAU,UAAU,kBAAkB,MAAM;AAAA;AAG9C,MAAI,UAAU,QAAQ,WAAW,aAAa,IAAI,KAAK,cAAc;AACnE,cAAU,UAAU,kBAAkB,MAAM;AAAA;AAI9C,YAAU,QAAQ,YAAY,aAAa;AAE3C,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM;AAAA,MACJ;AAAA,QACE,UAAU;AACd,UAAM,iBAAiB;AAAA,MACrB;AAAA,MACA,YAAY,SAAO;AACjB,uBAAe,OAAO;AACtB,gBAAQ;AACR,uBAAe,WAAW,QAAQ,OAAK,EAAE,WAAW;AAAA;AAAA,MAEtD,aAAa,SAAO;AAClB,uBAAe,OAAO;AACtB,eAAO;AACP,uBAAe,WAAW,QAAQ,OAAK,EAAE,YAAY;AAAA;AAAA,MAEvD,MAAM;AAAA,MACN,YAAY;AAAA;AAEd,UAAM,iBAAiB,YAAY,UAAU,aAAW,IAAI,cAAc,QAAQ,IAAI;AAEtF,QAAI,mBAAmB,IAAI;AASzB,kBAAY,gBAAgB,WAAW,KAAK;AAAA,WACvC;AACL,kBAAY,KAAK;AAAA;AAAA;AAAA;AAKvB,2BAA2B,MAAM,MAAM;AACrC,QAAM,UAAU;AAAA,IACd,UAAU;AAAA,IAEV,aAAa;AAAA,IACb,gBAAgB;AAAA;AAElB,aAAW,MAAM;AACf,YAAQ,iBAAiB;AACzB,iBAAa,QAAQ,aAAa,MAAM,MAAM,KAAK,MAAM,oBAAoB,QAAQ,cAAc,MAAM,OAAK;AAC5G,UAAI,KAAK,EAAE,SAAS,cAAc;AAChC,yBAAiB,QAAQ,aAAa;AAAA,aACjC;AACL,4BAAoB,QAAQ;AAAA;AAAA;AAAA,KAG/B,KAAK;AACR,SAAO;AAAA;AAGT,4BAA4B,aAAa,MAAM,MAAM;AACnD,MAAI,YAAY,WAAW,GAAG;AAE5B,UAAM,UAAU,YAAY;AAC5B,UAAM,MAAM,MAAM,KAAK,QAAQ;AAC/B,YAAQ,WAAW;AACnB,YAAQ,WAAW,QAAQ,OAAK,EAAE,WAAW;AAC7C,WAAO;AAAA,aACE,YAAY,SAAS,GAAG;AAEjC,UAAM,eAAe,IAAI,kBAAkB,YAAY,IAAI,aAAW,QAAQ;AAE9E,UAAM,MAAM,MAAO,YAAW,KAAK,YAAY,KAAK,SAAS,eAAe,KAAK;AACjF,iBAAa,eAAe,OAAO;AAEnC,UAAM,kBAAkB,KAAK,WACvB;AAAA,MACJ;AAAA,QACE,iBACE,YAAY,yBAAyB,iBAAiB,CAAC;AAE7D,iBAAa,gBAAgB;AAE7B,QAAI,gBAAgB;AAClB,YAAM,UAAU,MAAO,YAAW,kBAAkB,eAAe,gBAAgB;AACnF,mBAAa,eAAe,WAAW;AAAA;AAGzC,QAAI;AACF,YAAM,gBAAgB,MAAM,KAAK;AAEjC,UAAI,CAAC,iBAAiB,CAAC,MAAM,QAAQ,cAAc,OAAO;AACxD,cAAM,IAAI,yBAAyB;AAAA;AAGrC,oBAAc,KAAK,QAAQ,CAAC,SAAS,UAAU;AAC7C,YAAI,CAAC;AAAS;AACd,cAAM,UAAU,YAAY;AAE5B,YAAI,SAAS;AACX,gBAAM,MAAM,qBAAqB,eAAe;AAChD,kBAAQ,WAAW;AAAA;AAAA;AAGvB,aAAO;AAAA,aACA,GAAP;AACA,kBAAY,QAAQ,aAAW,QAAQ,YAAY;AAAA;AAAA;AAIvD,SAAO,QAAQ;AAAA;AAIjB,0BAA0B,aAAa,OAAO;AAC5C,cAAY,QAAQ,aAAW,QAAQ,YAAY;AAAA;AAIrD,6BAA6B,aAAa;AACxC,cAAY,QAAQ,CAAC,SAAS,UAAU;AACtC,QAAI,CAAC,QAAQ,MAAM;AACjB,cAAQ,YAAY,IAAI,yBAAyB,wDAAwD;AAAA,qCAAmD,YAAY;AAAA;AAAA;AAAA;AAK9K,8BAA8B,eAAe,MAAM;AAEjD,QAAM,OAAO,KAAK,WAAW;AAC7B,QAAM,MAAM,cAAc;AAC1B,MAAI,gBAAgB;AACpB,SAAO;AAAA;;;AGrNT;AAAA,mCAAkC,QAAQ,UAAU;AAAE,MAAI,UAAU;AAAM,WAAO;AAAI,MAAI,SAAS,+BAA8B,QAAQ;AAAW,MAAI,KAAK;AAAG,MAAI,OAAO,uBAAuB;AAAE,QAAI,mBAAmB,OAAO,sBAAsB;AAAS,SAAK,IAAI,GAAG,IAAI,iBAAiB,QAAQ,KAAK;AAAE,YAAM,iBAAiB;AAAI,UAAI,SAAS,QAAQ,QAAQ;AAAG;AAAU,UAAI,CAAC,OAAO,UAAU,qBAAqB,KAAK,QAAQ;AAAM;AAAU,aAAO,OAAO,OAAO;AAAA;AAAA;AAAU,SAAO;AAAA;AAEne,wCAAuC,QAAQ,UAAU;AAAE,MAAI,UAAU;AAAM,WAAO;AAAI,MAAI,SAAS;AAAI,MAAI,aAAa,OAAO,KAAK;AAAS,MAAI,KAAK;AAAG,OAAK,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAAE,UAAM,WAAW;AAAI,QAAI,SAAS,QAAQ,QAAQ;AAAG;AAAU,WAAO,OAAO,OAAO;AAAA;AAAQ,SAAO;AAAA;AAQ1S,IAAM,sBAAqB;AACZ,+BAA+B,SAAS;AACrD,QAAM,OAAO,WAAW;AACxB,QAAM,eAAe,KAAK,gBAAgB;AAE1C,QAAM,iBAAiB,KAAK,kBAAkB;AAC9C,QAAM,WAAW,KAAK,YAAY;AAClC,QAAM,eAAe,KAAK,gBAAgB;AAC1C,QAAM,YAAY;AAClB,QAAM,YAAY;AAClB,MAAI,KAAK;AAAQ,cAAU,SAAS,KAAK;AACzC,MAAI,KAAK;AAAa,cAAU,cAAc,KAAK;AACnD,MAAI,KAAK;AAAM,cAAU,OAAO,KAAK;AACrC,MAAI,KAAK;AAAO,cAAU,QAAQ,KAAK;AACvC,MAAI,KAAK;AAAU,cAAU,WAAW,KAAK;AAC7C,MAAI,KAAK;AAAS,cAAU,iBAAiB,KAAK;AAClD,SAAO,UAAQ,SAAO;AAEpB,QAAI,IAAI,gBAAgB,CAAC,gBAAgB;AACvC,aAAO,KAAK;AAAA;AAGd,QAAI,CAAE,gBAAe,eAAe;AAClC,YAAM,IAAI,yBAAyB;AAAA;AAIrC,QAAI,IAAI,cAAc;AACpB,aAAO,KAAK;AAAA;AAGd,WAAO,kBAAiB,KAAK,MAAM;AAAA,MACjC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA;AAKN,2BAA0B,KAAK,MAAM,MAAM;AACzC,QAAM;AAAA,IACJ;AAAA,MACE;AACJ,QAAM,aAAa,IAAI,UAAU,KAAK;AAEtC,MAAI,CAAC,YAAY;AACf,WAAO,KAAK;AAAA;AAGd,MAAI,CAAC,UAAU,WAAW,CAAC,UAAU,QAAQ,gBAAgB;AAC3D,cAAU,UAAU,mBAAkB,MAAM;AAAA;AAG9C,MAAI,UAAU,QAAQ,WAAW,aAAa,IAAI,KAAK,cAAc;AACnE,cAAU,UAAU,mBAAkB,MAAM;AAAA;AAI9C,YAAU,QAAQ,YAAY,aAAa;AAE3C,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,aAAa,IAAI;AACvB,UAAM;AAAA,MACJ;AAAA,QACE,UAAU;AACd,UAAM,iBAAiB;AAAA,MACrB;AAAA,MACA,YAAY,SAAO;AACjB,uBAAe,OAAO;AACtB,gBAAQ;AACR,uBAAe,WAAW,QAAQ,OAAK,EAAE,WAAW;AAAA;AAAA,MAEtD,aAAa,SAAO;AAClB,uBAAe,OAAO;AACtB,eAAO;AACP,uBAAe,WAAW,QAAQ,OAAK,EAAE,YAAY;AAAA;AAAA,MAEvD,MAAM;AAAA,MACN,YAAY;AAAA;AAGd,QAAI,WAAW,aAAa;AAS1B,iBAAW,YAAY,WAAW,KAAK;AAAA,WAClC;AACL,iBAAW,cAAc;AAAA;AAAA;AAAA;AAK/B,4BAA2B,MAAM,MAAM;AACrC,QAAM,UAAU;AAAA,IACd,UAAU;AAAA,IAEV,YAAY;AAAA,IACZ,gBAAgB;AAAA;AAElB,aAAW,MAAM;AACf,YAAQ,iBAAiB;AACzB,kBAAa,QAAQ,YAAY,MAAM,MAAM,KAAK,MAAM,qBAAoB,QAAQ,aAAa,MAAM,MAAM,qBAAoB,QAAQ;AAAA,KACxI,KAAK;AACR,SAAO;AAAA;AAGT,6BAA4B,YAAY,MAAM,MAAM;AAClD,QAAM,MAAM,OAAO,KAAK;AAExB,MAAI,IAAI,WAAW,GAAG;AAEpB,UAAM,UAAU,WAAW,IAAI;AAC/B,UAAM,MAAM,MAAM,KAAK,QAAQ;AAC/B,YAAQ,WAAW;AACnB,YAAQ,WAAW,QAAQ,OAAK,EAAE,WAAW;AAC7C,WAAO;AAAA,aACE,IAAI,SAAS,GAAG;AAEzB,UAAM,eAAe,IAAI,kBAAkB,IAAI,IAAI,QAAM,WAAW,IAAI;AAExE,UAAM,MAAM,MAAO,YAAW,KAAK,YAAY,KAAK,SAAS,cAAc,KAAK;AAChF,iBAAa,eAAe,OAAO;AAEnC,UAAM,kBAAkB,KAAK,WACvB;AAAA,MACJ;AAAA,QACE,iBACE,YAAY,0BAAyB,iBAAiB,CAAC;AAE7D,iBAAa,gBAAgB;AAE7B,QAAI,gBAAgB;AAClB,YAAM,UAAU,MAAO,YAAW,kBAAkB,eAAe,gBAAgB;AACnF,mBAAa,eAAe,WAAW;AAAA;AAGzC,QAAI;AACF,YAAM,gBAAgB,MAAM,KAAK;AAEjC,UAAI,CAAC,iBAAiB,CAAC,MAAM,QAAQ,cAAc,OAAO;AACxD,cAAM,IAAI,yBAAyB;AAAA;AAGrC,oBAAc,KAAK,QAAQ,aAAW;AACpC,YAAI,CAAC;AAAS;AACd,cAAM,UAAU,WAAW,QAAQ;AAEnC,YAAI,SAAS;AACX,gBAAM,MAAM,sBAAqB,eAAe;AAChD,kBAAQ,WAAW;AAAA;AAAA;AAGvB,aAAO;AAAA,aACA,GAAP;AACA,UAAI,QAAQ,QAAM;AAChB,mBAAW,IAAI,YAAY;AAAA;AAAA;AAAA;AAKjC,SAAO,QAAQ;AAAA;AAIjB,8BAA6B,YAAY;AACvC,SAAO,KAAK,YAAY,QAAQ,QAAM;AACpC,UAAM,UAAU,WAAW;AAE3B,QAAI,CAAC,QAAQ,MAAM;AACjB,cAAQ,YAAY,IAAI,yBAAyB,uDAAuD;AAAA,gDAA2D;AAAA;AAAA;AAAA;AAKzK,+BAA8B,eAAe,MAAM;AAEjD,QAAM,OAAO,KAAK,WAAW;AAC7B,QAAM,MAAM,cAAc;AAC1B,MAAI,gBAAgB;AACpB,SAAO;AAAA;;;ACpMT;AAIA,kBAAkB;AAAA;AAEX,6CAAuC,UAAU;AAAA,EACtD,YAAY,KAAK;AACf,UAAM;AACN,SAAK,OAAO;AAAA;AAAA;AAID,yBAAyB,SAAS;AAC/C,QAAM,OAAO,WAAW;AACxB,QAAM,UAAU,KAAK,gBAAgB;AACrC,QAAM,cAAc,KAAK,eAAe,CAAC,KAAM;AAC/C,QAAM,cAAc,KAAK,eAAe;AACxC,QAAM,SAAS,KAAK,WAAW,QAAQ,MAAM;AAAA,MAAK,KAAK,UAAU,QAAQ,IAAI,KAAK,SAAS;AAC3F,QAAM,iBAAiB,KAAK,kBAAkB;AAC9C,QAAM,gBAAgB,KAAK,iBAAiB;AAC5C,QAAM,eAAe,KAAK,cAAc;AAExC,QAAM,cAAc,KAAK,eAAe;AAExC,MAAI,eAAe,MAAM;AAEzB,MAAI,aAAa;AACf,QAAI,MAAM,QAAQ,cAAc;AAC9B,qBAAe,aAAW;AACxB,YAAI,YAAY,UAAU,SAAS;AACjC,iBAAO,YAAY;AAAA;AAGrB,eAAO;AAAA;AAAA,eAEA,WAAW,cAAc;AAClC,qBAAe;AAAA;AAAA;AAInB,MAAI;AAEJ,MAAI,OAAO,YAAY,UAAU;AAC/B,qBAAiB,MAAM;AAAA,SAClB;AACL,qBAAiB;AAAA;AAGnB,MAAI,oBAAoB,CAAC,QAAQ,KAAK,QAAQ;AAC5C,WAAO,IAAI,SAAS,OAAO,IAAI,SAAS;AAAA;AAG1C,MAAI,aAAa;AACf,QAAI,MAAM,QAAQ,cAAc;AAC9B,0BAAoB,CAAC,QAAQ,KAAK,QAAQ,YAAY,QAAQ,IAAI,YAAY;AAAA,eACrE,WAAW,cAAc;AAClC,0BAAoB;AAAA;AAAA;AAIxB,SAAO,UAAQ,SAAO;AACpB,QAAI,IAAI,gBAAgB,CAAC,gBAAgB;AACvC,aAAO,KAAK;AAAA;AAGd,QAAI,IAAI,gBAAgB,CAAC,eAAe;AACtC,aAAO,KAAK;AAAA;AAGd,WAAO,qBAAqB;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA;AAKN,oCAAoC,GAAG,QAAQ,GAAG,UAAU,GAAG,YAAY,MAAM;AAC/E,QAAM,YAAY,OAAM,cAAa;AACnC,UAAM,aAAa,EAAE,aAAa;AAElC,QAAI,YAAY;AACd,QAAE,OAAO,UAAU;AACnB,QAAE,OAAO,iBAAiB;AAC1B,aAAO,qBAAqB,GAAG,YAAY,UAAU,GAAG;AAAA;AAG1D,UAAM;AAAA;AAGR,QAAM,cAAc,YAAY;AAC9B,QAAI;AACF,YAAM,UAAU,EAAE,eAAe;AACjC,aAAO,MAAM,mBAAmB,EAAE,KAAK,EAAE,MAAM,SAAS,MAAM;AAC5D,cAAM,MAAM,IAAI,yBAAyB,8BAA8B;AACvE,eAAO,UAAU;AAAA;AAAA,aAEZ,GAAP;AAEA,UAAI,KAAK,CAAC,EAAE,OAAO,CAAE,cAAa,6BAA6B,EAAE,SAAS,cAAc;AACtF,eAAO,UAAU;AAAA;AAInB,UAAI,KAAK,EAAE,OAAO,EAAE,kBAAkB,EAAE,IAAI,QAAQ,EAAE,KAAK,EAAE,MAAM;AACjE,cAAM,MAAM,IAAI,yBAAyB,yBAAyB,EAAE,IAAI;AACxE,eAAO,UAAU;AAAA;AAGnB,YAAM;AAAA;AAAA;AAIV,MAAI,YAAY,GAAG;AAEjB,WAAO;AAAA,SACF;AAEL,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,QACE,iBAAiB,aAAa;AAElC,QAAI,EAAE,cAAc;AAElB,QAAE,aAAa,WAAW;AAAA;AAG5B,QAAI,EAAE,aAAa;AACjB,QAAE,YAAY;AAAA,QACZ;AAAA,QACA,YAAY;AAAA,QACZ;AAAA,QACA;AAAA,QACA;AAAA,QACA,KAAK,EAAE;AAAA;AAAA;AAIX,WAAO;AAAA;AAAA;AASJ,0BAA0B,QAAQ,QAAQ,GAAG;AAClD,MAAI,QAAQ;AACZ,MAAI,YAAY;AAEhB,MAAI,SAAS,GAAG;AACd,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,SAAS;AAAA;AAAA;AAIb,QAAM,UAAU,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/C,QAAI;AAEJ,YAAQ,SAAO;AACb,UAAI,SAAS;AACX,qBAAa;AACb,kBAAU;AAAA;AAGZ,aAAO,IAAI,yBAAyB,OAAO;AAAA;AAG7C,gBAAY,MAAM;AAChB,UAAI,SAAS;AACX,qBAAa;AACb,kBAAU;AACV,gBAAQ;AAAA;AAAA;AAIZ,cAAU,WAAW,MAAM;AACzB,cAAQ;AAAA,OACP;AAAA;AAEL,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AASG,4BAA4B,SAAS,WAAW,WAAW;AAChE,MAAI,CAAC,WAAW;AACd,WAAO;AAAA;AAGT,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,YAAY,WAAW,MAAM;AACjC,kBAAY,KAAK,SAAS,MAAM;AAAA,OAC/B;AACH,YAAQ,KAAK,SAAO;AAClB,mBAAa;AACb,cAAQ;AAAA,OACP,MAAM,SAAO;AACd,mBAAa;AACb,aAAO;AAAA;AAAA;AAAA;;;ACzNb;AAEe,uBAAuB,MAAM;AAC1C,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,QAAQ;AACZ,QAAM,aAAa,OAAO;AAC1B,QAAM,iBAAiB;AACvB,SAAO,UAAQ,OAAM,QAAO;AAC1B,QAAI,UAAU,MAAM,MAAO,YAAW,cAAc,WAAW,OAAO;AAEtE,QAAI,gBAAgB;AAClB,UAAI,UAAU,UAAU,MAAO,YAAW,kBAAkB,eAAe,OAAO;AAAA;AAGpF,QAAI;AAAQ,UAAI,UAAU,SAAS;AACnC,QAAI;AAAa,UAAI,UAAU,cAAc;AAC7C,QAAI;AAAM,UAAI,UAAU,OAAO;AAC/B,QAAI;AAAO,UAAI,UAAU,QAAQ;AACjC,QAAI;AAAU,UAAI,UAAU,WAAW;AACvC,WAAO,KAAK;AAAA;AAAA;;;AC1BhB;AAGO,4CAAsC,UAAU;AAAA,EACrD,YAAY,KAAK;AACf,UAAM;AACN,SAAK,OAAO;AAAA;AAAA;AAID,wBAAwB,MAAM;AAC3C,QAAM;AAAA,IACJ,OAAO;AAAA,IACP;AAAA,IACA,kBAAkB;AAAA,IAClB,SAAS;AAAA,IACT,SAAS;AAAA,MACP,QAAQ;AACZ,MAAI,yBAAyB;AAC7B,SAAO,UAAQ,OAAM,QAAO;AAC1B,QAAI;AAEF,YAAM,QAAQ,MAAO,YAAW,gBAAgB,aAAa,OAAO;AAEpE,UAAI,CAAC,SAAS,uBAAuB,CAAC,iBAAiB;AACrD,cAAM,IAAI,wBAAwB;AAAA;AAGpC,UAAI,OAAO;AACT,YAAI,UAAU,QAAQ,UAAU,GAAG,SAAS;AAAA;AAG9C,YAAM,MAAM,MAAM,KAAK;AACvB,aAAO;AAAA,aACA,GAAP;AACA,UAAI,KAAK,qBAAqB;AAC5B,YAAI,EAAE,YAAY,iBAAiB,EAAE,OAAO,EAAE,IAAI,WAAW,KAAK;AAChE,cAAI,qBAAqB;AACvB,gBAAI,CAAC,wBAAwB;AAC3B,uCAAyB,QAAQ,QAAQ,oBAAoB,KAAK,EAAE,MAAM,KAAK,cAAY;AACzF,yCAAyB;AACzB,uBAAO;AAAA,iBACN,MAAM,SAAO;AACd,yCAAyB;AACzB,sBAAM;AAAA;AAAA;AAIV,mBAAO,uBAAuB,KAAK,cAAY;AAC7C,kBAAI,CAAC,YAAY,CAAC,iBAAiB;AACjC,sBAAM,IAAI,wBAAwB;AAAA;AAGpC,oBAAM,SAAS,IAAI;AAEnB,kBAAI,UAAU;AACZ,uBAAO,UAAU,QAAQ,UAAU,GAAG,SAAS;AAAA,qBAC1C;AACL,uBAAO,OAAO,UAAU,QAAQ;AAAA;AAGlC,qBAAO,KAAK;AAAA;AAAA;AAAA;AAAA;AAMpB,YAAM;AAAA;AAAA;AAAA;;;ACnEZ;AACe,+BAA+B,MAAM;AAClD,QAAM,SAAS,QAAQ,KAAK,UAAU,QAAQ,IAAI,KAAK,SAAS;AAChE,SAAO,UAAQ,SAAO;AACpB,UAAM,QAAQ,IAAI,OAAO;AACzB,WAAO,KAAK,KAAK,KAAK,SAAO;AAC3B,YAAM,MAAM,IAAI,OAAO;AACvB,aAAO,IAAI,MAAM,YAAY,IAAI,WAAW,KAAK;AACjD,aAAO;AAAA;AAAA;AAAA;;;ACRb;AAAA,wBAAuB,QAAQ;AAAE,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAAE,QAAI,SAAS,UAAU,MAAM,OAAO,UAAU,KAAK;AAAI,QAAI,UAAU,OAAO,KAAK;AAAS,QAAI,OAAO,OAAO,0BAA0B,YAAY;AAAE,gBAAU,QAAQ,OAAO,OAAO,sBAAsB,QAAQ,OAAO,SAAU,KAAK;AAAE,eAAO,OAAO,yBAAyB,QAAQ,KAAK;AAAA;AAAA;AAAmB,YAAQ,QAAQ,SAAU,KAAK;AAAE,uBAAgB,QAAQ,KAAK,OAAO;AAAA;AAAA;AAAa,SAAO;AAAA;AAExd,0BAAyB,KAAK,KAAK,OAAO;AAAE,MAAI,OAAO,KAAK;AAAE,WAAO,eAAe,KAAK,KAAK,EAAE,OAAc,YAAY,MAAM,cAAc,MAAM,UAAU;AAAA,SAAgB;AAAE,QAAI,OAAO;AAAA;AAAS,SAAO;AAAA;AAK5L,0BAA0B,MAAM;AAC7C,QAAM,SAAS,QAAQ,KAAK,UAAU,QAAQ,IAAI,KAAK,SAAS;AAChE,SAAO,UAAQ,SAAO;AACpB,UAAM,QAAQ,IAAI,OAAO;AACzB,WAAO,OAAO,IAAI,WAAW;AAC7B,WAAO,KAAK,KAAK,KAAK,SAAO;AAC3B,YAAM,MAAM,IAAI,OAAO;AACvB,UAAI;AACJ,UAAI;AAEJ,UAAI,eAAe,cAAc;AAC/B,kBAAU,IAAI;AACd,oBAAY;AAAA,UACV,OAAO,IAAI;AAAA,UACX,WAAW,IAAI;AAAA;AAAA,iBAER,eAAe,mBAAmB;AAC3C,kBAAU,IAAI;AACd,oBAAY;AAAA,UACV,aAAa,IAAI;AAAA,UACjB,cAAc,IAAI;AAAA;AAAA,aAEf;AACL,kBAAU;AACV,oBAAY;AAAA;AAGd,aAAO,QAAQ,cAAc,MAAM,WAAW,eAAc,IAAI,WAAW;AAAA,QACzE;AAAA,QACA;AAAA;AAGF,UAAI,IAAI,WAAW,KAAK;AACtB,eAAO,UAAU,IAAI,WAAW,IAAI,cAAc,UAAU;AAAA;AAG9D,aAAO;AAAA,OACN,WAAS;AACV,UAAI,SAAS,MAAM,QAAQ,MAAM,SAAS,cAAc;AACtD,eAAO,aAAa,IAAI;AAAA;AAG1B,YAAM;AAAA;AAAA;AAAA;;;ACjDZ;AAAA,mCAAkC,QAAQ,UAAU;AAAE,MAAI,UAAU;AAAM,WAAO;AAAI,MAAI,SAAS,+BAA8B,QAAQ;AAAW,MAAI,KAAK;AAAG,MAAI,OAAO,uBAAuB;AAAE,QAAI,mBAAmB,OAAO,sBAAsB;AAAS,SAAK,IAAI,GAAG,IAAI,iBAAiB,QAAQ,KAAK;AAAE,YAAM,iBAAiB;AAAI,UAAI,SAAS,QAAQ,QAAQ;AAAG;AAAU,UAAI,CAAC,OAAO,UAAU,qBAAqB,KAAK,QAAQ;AAAM;AAAU,aAAO,OAAO,OAAO;AAAA;AAAA;AAAU,SAAO;AAAA;AAEne,wCAAuC,QAAQ,UAAU;AAAE,MAAI,UAAU;AAAM,WAAO;AAAI,MAAI,SAAS;AAAI,MAAI,aAAa,OAAO,KAAK;AAAS,MAAI,KAAK;AAAG,OAAK,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAAE,UAAM,WAAW;AAAI,QAAI,SAAS,QAAQ,QAAQ;AAAG;AAAU,WAAO,OAAO,OAAO;AAAA;AAAQ,SAAO;AAAA;AAK3R,yBAAyB,SAAS;AAC/C,QAAM,OAAO,WAAW;AACxB,QAAM,SAAS,KAAK,UAAU,QAAQ,MAAM,KAAK;AACjD,QAAM,SAAS,KAAK,UAAU;AAC9B,QAAM,6BAA6B,KAAK,8BAA8B;AAEtE,yBAAuB,QAAQ,QAAQ;AACrC,WAAO,OAAO,QAAQ,WAAS;AAC7B,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,UACE,OACE,OAAO,0BAAyB,OAAO,CAAC,WAAW;AAEzD,UAAI,MAAM,GAAG;AACb,YAAM,MAAM;AAEZ,UAAI,SAAS,MAAM,QAAQ,QAAQ;AACjC,cAAM,GAAG,QAAQ,MAAM;AAAA,IAAc,MAAM,KAAK;AAChD,YAAI,KAAK,sBAAsB;AAAA,aAC1B;AACL,cAAM,GAAG,QAAQ;AACjB,YAAI,KAAK,sBAAsB;AAAA;AAGjC,UAAI,QAAQ,OAAO,KAAK,MAAM,QAAQ;AACpC,cAAM,GAAG;AAAA;AACT,YAAI,KAAK;AAAA;AAGX,YAAM,GAAG;AAAA;AAAA;AAAA;AACT,UAAI,KAAK,sBAAsB,wBAAwB;AAEvD,UAAI,CAAC,SAAS,CAAC,4BAA4B;AACzC,cAAM,GAAG;AAAA;AAAA,aAAqB;AAC9B,YAAI,KAAK,sBAAsB;AAAA;AAGjC,aAAO,GAAG;AAAA;AAAA,GAAW,GAAG;AAAA;AAAA;AAI5B,SAAO,UAAQ,SAAO;AACpB,WAAO,KAAK,KAAK,KAAK,SAAO;AAC3B,UAAI,eAAe,cAAc;AAC/B,YAAI,MAAM,QAAQ,IAAI,SAAS;AAC7B,wBAAc,IAAI,QAAQ;AAAA,YACxB;AAAA,YACA;AAAA;AAAA;AAAA,iBAGK,eAAe,mBAAmB;AAC3C,YAAI,MAAM,QAAQ,IAAI,OAAO;AAC3B,cAAI,KAAK,QAAQ,aAAW;AAC1B,gBAAI,MAAM,QAAQ,QAAQ,SAAS;AACjC,4BAAc,QAAQ,QAAQ;AAAA,gBAC5B;AAAA,gBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOV,aAAO;AAAA;AAAA;AAAA;AAKb,6BAA6B;AAC3B,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AC7ET;AAAA,4BAAmC;AAEpB,yBAAyB,MAAM;AAC5C,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE,QAAQ;AACZ,QAAM,QAAQ,IAAI,yCAAmB;AAAA,IACnC,MAAM,QAAQ;AAAA,IAEd,KAAK,OAAO,KAAK,KAAK;AAAA;AAIxB,MAAI,WAAW,SAAS;AACtB,WAAO;AAAA;AAGT,SAAO,UAAQ,OAAM,QAAO;AAC1B,QAAI,IAAI,cAAc;AACpB,UAAI,iBAAiB;AACnB,cAAM;AAAA;AAGR,UAAI,CAAC,gBAAgB;AACnB,eAAO,KAAK;AAAA;AAAA;AAIhB,QAAI,IAAI,gBAAgB,CAAC,eAAe;AACtC,aAAO,KAAK;AAAA;AAGd,QAAI,IAAI,eAAe,IAAI,YAAY,OAAO;AAC5C,YAAM,UAAU,IAAI;AACpB,YAAM,YAAY,IAAI;AACtB,YAAM,MAAM,MAAM,KAAK;AAEvB,UAAI,CAAC,IAAI,UAAU,IAAI,UAAU,aAAa;AAC5C,cAAM,IAAI,SAAS,WAAW;AAAA;AAGhC,aAAO;AAAA;AAGT,QAAI;AACF,YAAM,UAAU,IAAI;AACpB,YAAM,YAAY,IAAI;AACtB,YAAM,YAAY,MAAM,IAAI,SAAS;AAErC,UAAI,WAAW;AACb,eAAO;AAAA;AAGT,YAAM,MAAM,MAAM,KAAK;AAEvB,UAAI,CAAC,IAAI,UAAU,IAAI,UAAU,aAAa;AAC5C,cAAM,IAAI,SAAS,WAAW;AAAA;AAGhC,aAAO;AAAA,aACA,GAAP;AAEA,cAAQ,IAAI;AAAA;AAGd,WAAO,KAAK;AAAA;AAAA;;;ACvEhB;AACA,+BAA+B,MAAM;AACnC,QAAM;AAAA,IACJ;AAAA,IACA,aAAa;AAAA,MACX,QAAQ;AACZ,SAAO,OAAM,QAAO;AAClB,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,QACE;AAEJ,QAAI,CAAC,MAAM;AACT;AAAA;AAGF,UAAM,oBAAoB,QAAQ,IAAI;AACtC,QAAI,YAAY;AAEhB,QAAI,sBAAsB,MAAM;AAC9B,kBAAY,SAAS,mBAAmB;AAAA;AAG1C,UAAM,SAAS,KAAK;AACpB,QAAI,YAAY;AAChB,QAAI,eAAe;AAEnB,OAAG;AACD,YAAM,OAAO,MAAM,OAAO;AAC1B,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,UACE;AACJ,YAAM,SAAS,SAAS,MAAM,UAAU;AACxC,kBAAY;AAEZ,UAAI,CAAC,WAAW;AACd,wBAAgB;AAChB,mBAAW,cAAc;AAAA;AAAA,aAEpB,CAAC;AAAA;AAAA;AAIC,4BAA4B,MAAM;AAC/C,QAAM,kBAAkB,sBAAsB;AAE9C,QAAM,KAAK,UAAQ,OAAM,QAAO;AAC9B,UAAM,MAAM,MAAM,KAAK;AACvB,oBAAgB,IAAI;AACpB,WAAO;AAAA;AAGT,KAAG,kBAAkB;AACrB,SAAO;AAAA;;;ACtDT;;;ACAA;AAAA,6BAA2C;AAC3C,0BAAwC;AACxC,+BAA6C;;;ADA9B,4BAA4B;AACzC,SAAO,UAAQ,OAAM,QAAO;AAC1B,QAAI,eAAe,mBAAmB;AACpC,YAAM,IAAI,MAAM;AAAA;AAGlB,UAAM,aAAa;AAAA,MACjB,OAAO,IAAI,UAAU;AAAA,MACrB,WAAW,IAAI;AAAA;AAEjB,UAAM;AAAA,MACJ,OAAO;AAAA,MACP;AAAA,QACE,iCAAa;AAEjB,QAAI,MAAM,MAAM;AACd,YAAM,WAAW,IAAI;AACrB,eAAS,OAAO,cAAc,KAAK,UAAU;AAC7C,YAAM,UAAU;AAChB,UAAI,IAAI;AACR,YAAM,QAAQ,WAAS;AACrB,gBAAQ,EAAE,KAAK;AAAA;AAEjB,eAAS,OAAO,OAAO,KAAK,UAAU;AACtC,UAAI;AACJ,YAAM,QAAQ,CAAC,OAAO,SAAS;AAC7B,iBAAS,OAAO,EAAE,GAAG,MAAM,KAAK;AAAA;AAElC,UAAI,UAAU,SAAS;AACvB,UAAI,UAAU,OAAO;AACrB,aAAO,IAAI,UAAU,QAAQ;AAAA;AAG/B,UAAM,MAAM,MAAM,KAAK;AACvB,WAAO;AAAA;AAAA;;;AEpCX;AAAA,wBAAuB,QAAQ;AAAE,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAAE,QAAI,SAAS,UAAU,MAAM,OAAO,UAAU,KAAK;AAAI,QAAI,UAAU,OAAO,KAAK;AAAS,QAAI,OAAO,OAAO,0BAA0B,YAAY;AAAE,gBAAU,QAAQ,OAAO,OAAO,sBAAsB,QAAQ,OAAO,SAAU,KAAK;AAAE,eAAO,OAAO,yBAAyB,QAAQ,KAAK;AAAA;AAAA;AAAmB,YAAQ,QAAQ,SAAU,KAAK;AAAE,uBAAgB,QAAQ,KAAK,OAAO;AAAA;AAAA;AAAa,SAAO;AAAA;AAExd,0BAAyB,KAAK,KAAK,OAAO;AAAE,MAAI,OAAO,KAAK;AAAE,WAAO,eAAe,KAAK,KAAK,EAAE,OAAc,YAAY,MAAM,cAAc,MAAM,UAAU;AAAA,SAAgB;AAAE,QAAI,OAAO;AAAA;AAAS,SAAO;AAAA;AAE5L,yCAAU,uBAAuB;AAC9C,SAAO,CAAC,KAAK,QAAQ;AACnB,UAAM,eAAe;AACrB,WAAO,QAAQ,IAAI,IAAI,KAAK,IAAI,UAAQ,IAAI,QAAQ,aAAW;AAC7D,YAAM,aAAa,eAAc;AAAA,QAC/B,WAAW,IAAI;AAAA,SACd,KAAK;AAAA,QACN,MAAM;AAAA;AAGR,YAAM,cAAc,eAAc,IAAI,KAAK;AAAA,QACzC,OAAO,IAAI;AACT,eAAK,aAAa;AAClB,iBAAO;AAAA;AAAA,QAGT,MAAM;AACJ,iBAAO;AAAA;AAAA,QAGT,KAAK,SAAS;AACZ,kBAAQ;AAAA,YACN,QAAQ,KAAK;AAAA,YACb,IAAI,KAAK;AAAA,YACT;AAAA;AAAA;AAAA,QAKJ,YAAY;AACV,iBAAO;AAAA;AAAA,QAGT,SAAS;AAAA;AAAA,QAET,MAAM,SAAS;AACb,eAAK,UAAU;AAAA;AAAA,QAGjB,IAAI,SAAS;AAEX,cAAI,SAAS;AACX,iBAAK,UAAU;AAAA;AAGjB,kBAAQ;AAAA,YACN,QAAQ,KAAK;AAAA,YACb,IAAI,KAAK;AAAA,YACT,SAAS,KAAK;AAAA;AAAA;AAAA;AAMpB,mBAAa,KAAK;AAClB,4BAAsB,YAAY;AAAA,SAC/B,KAAK,eAAa;AACrB,UAAI,WAAW;AACf,gBAAU,QAAQ,CAAC;AAAA,QACjB;AAAA,QACA;AAAA,QACA;AAAA,SACC,QAAQ;AACT,YAAI,QAAQ;AACV,cAAI,OAAO;AAAA;AAGb,cAAM,QAAQ,UAAU,SAAS,IAAI,MAAM,MAAM;AACjD,oBAAY,WAAW,kBAAkB,YAAY;AAAA;AAEvD,UAAI,IAAI,gBAAgB;AACxB,UAAI,KAAK,IAAI;AAAA,OACZ,MAAM,SAAO;AACd,UAAI,OAAO,KAAK,KAAK;AAAA,QACnB,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
